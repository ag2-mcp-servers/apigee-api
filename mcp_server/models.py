# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:53:52+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class EdgeConfigstoreBundleBadBundleViolation(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of why the bundle is invalid and how to fix it.',
    )
    filename: Optional[str] = Field(
        None,
        description='The filename (including relative path from the bundle root) in which the error occurred.',
    )


class GoogleApiHttpBody(BaseModel):
    contentType: Optional[str] = Field(
        None,
        description='The HTTP Content-Type header value specifying the content type of the body.',
    )
    data: Optional[str] = Field(
        None, description='The HTTP request/response body as raw binary.'
    )
    extensions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Application specific response metadata. Must be set in the first response for streaming APIs.',
    )


class GoogleCloudApigeeV1AccessGet(BaseModel):
    name: Optional[str] = None
    value: Optional[str] = None


class GoogleCloudApigeeV1AccessRemove(BaseModel):
    name: Optional[str] = None
    success: Optional[bool] = None


class GoogleCloudApigeeV1AccessSet(BaseModel):
    name: Optional[str] = None
    success: Optional[bool] = None
    value: Optional[str] = None


class GoogleCloudApigeeV1ActivateNatAddressRequest(BaseModel):
    pass


class GoogleCloudApigeeV1AdvancedApiOpsConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Flag that specifies whether the Advanced API Ops add-on is enabled.',
    )


class Type(Enum):
    ALIAS_TYPE_UNSPECIFIED = 'ALIAS_TYPE_UNSPECIFIED'
    CERT = 'CERT'
    KEY_CERT = 'KEY_CERT'


class GoogleCloudApigeeV1AliasRevisionConfig(BaseModel):
    location: Optional[str] = Field(
        None,
        description='Location of the alias file. For example, a Google Cloud Storage URI.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the alias revision included in the keystore in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}/aliases/{alias}/revisions/{rev}`',
    )
    type: Optional[Type] = None


class GoogleCloudApigeeV1ApiCategoryData(BaseModel):
    id: Optional[str] = Field(None, description='ID of the category (a UUID).')
    name: Optional[str] = Field(None, description='Name of the category.')
    siteId: Optional[str] = Field(None, description='Name of the portal.')
    updateTime: Optional[str] = Field(
        None,
        description='Time the category was last modified in milliseconds since epoch.',
    )


class QuotaCounterScope(Enum):
    QUOTA_COUNTER_SCOPE_UNSPECIFIED = 'QUOTA_COUNTER_SCOPE_UNSPECIFIED'
    PROXY = 'PROXY'
    OPERATION = 'OPERATION'


class GoogleCloudApigeeV1ApiProductRef(BaseModel):
    apiproduct: Optional[str] = Field(None, description='Name of the API product.')
    status: Optional[str] = Field(
        None,
        description='Status of the API product. Valid values are `approved` or `revoked`.',
    )


class ApiProxyType(Enum):
    API_PROXY_TYPE_UNSPECIFIED = 'API_PROXY_TYPE_UNSPECIFIED'
    PROGRAMMABLE = 'PROGRAMMABLE'
    CONFIGURABLE = 'CONFIGURABLE'


class GoogleCloudApigeeV1ApiResponseWrapper(BaseModel):
    errorCode: Optional[str] = Field(
        None, description='ID that can be used to find errors in the log files.'
    )
    message: Optional[str] = Field(None, description='Description of the operation.')
    requestId: Optional[str] = Field(
        None,
        description='ID that can be used to find request details in the log files.',
    )
    status: Optional[str] = Field(None, description='Status of the operation.')


class GoogleCloudApigeeV1ApiSecurityConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Flag that specifies whether the API security add-on is enabled.',
    )
    expiresAt: Optional[str] = Field(
        None,
        description='Output only. Time at which the API Security add-on expires in in milliseconds since epoch. If unspecified, the add-on will never expire.',
    )


class GoogleCloudApigeeV1ApiSecurityRuntimeConfig(BaseModel):
    location: Optional[List[str]] = Field(
        None,
        description='A list of up to 5 Cloud Storage Blobs that contain SecurityActions.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the environment API Security Runtime configuration resource. Format: `organizations/{org}/environments/{env}/apiSecurityRuntimeConfig`',
    )
    revisionId: Optional[str] = Field(
        None,
        description='Revision ID of the API Security Runtime configuration. The higher the value, the more recently the configuration was deployed.',
    )
    uid: Optional[str] = Field(
        None,
        description='Unique ID for the API Security Runtime configuration. The ID will only change if the environment is deleted and recreated.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Time that the API Security Runtime configuration was updated.',
    )


class GoogleCloudApigeeV1ArchiveDeployment(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Output only. The time at which the Archive Deployment was created in milliseconds since the epoch.',
    )
    gcsUri: Optional[str] = Field(
        None,
        description='Input only. The Google Cloud Storage signed URL returned from GenerateUploadUrl and used to upload the Archive zip file.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='User-supplied key-value pairs used to organize ArchiveDeployments. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the Archive Deployment in the following format: `organizations/{org}/environments/{env}/archiveDeployments/{id}`.',
    )
    operation: Optional[str] = Field(
        None,
        description='Output only. A reference to the LRO that created this Archive Deployment in the following format: `organizations/{org}/operations/{id}`',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Output only. The time at which the Archive Deployment was updated in milliseconds since the epoch.',
    )


class GoogleCloudApigeeV1AsyncQueryResult(BaseModel):
    expires: Optional[str] = Field(
        None, description='Query result will be unaccessable after this time.'
    )
    self: Optional[str] = Field(
        None,
        description='Self link of the query results. Example: `/organizations/myorg/environments/myenv/queries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result` or following format if query is running at host level: `/organizations/myorg/hostQueries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result`',
    )


class GoogleCloudApigeeV1Attribute(BaseModel):
    name: Optional[str] = Field(None, description='API key of the attribute.')
    value: Optional[str] = Field(None, description='Value of the attribute.')


class GoogleCloudApigeeV1Attributes(BaseModel):
    attribute: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='List of attributes.'
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'


class Verdict(Enum):
    VERDICT_UNSPECIFIED = 'VERDICT_UNSPECIFIED'
    NONE = 'NONE'
    FAIL = 'FAIL'
    PASS = 'PASS'


class GoogleCloudApigeeV1CanaryEvaluationMetricLabels(BaseModel):
    env: Optional[str] = Field(
        None, description='The environment ID associated with the metrics.'
    )
    instance_id: Optional[str] = Field(
        None,
        description='Required. The instance ID associated with the metrics. In Apigee Hybrid, the value is configured during installation.',
    )
    location: Optional[str] = Field(
        None, description='Required. The location associated with the metrics.'
    )


class GoogleCloudApigeeV1CertInfo(BaseModel):
    basicConstraints: Optional[str] = Field(
        None, description='X.509 basic constraints extension.'
    )
    expiryDate: Optional[str] = Field(
        None,
        description='X.509 `notAfter` validity period in milliseconds since epoch.',
    )
    isValid: Optional[str] = Field(
        None,
        description='Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.',
    )
    issuer: Optional[str] = Field(None, description='X.509 issuer.')
    publicKey: Optional[str] = Field(
        None, description='Public key component of the X.509 subject public key info.'
    )
    serialNumber: Optional[str] = Field(None, description='X.509 serial number.')
    sigAlgName: Optional[str] = Field(None, description='X.509 signatureAlgorithm.')
    subject: Optional[str] = Field(None, description='X.509 subject.')
    subjectAlternativeNames: Optional[List[str]] = Field(
        None, description='X.509 subject alternative names (SANs) extension.'
    )
    validFrom: Optional[str] = Field(
        None,
        description='X.509 `notBefore` validity period in milliseconds since epoch.',
    )
    version: Optional[int] = Field(None, description='X.509 version.')


class GoogleCloudApigeeV1Certificate(BaseModel):
    certInfo: Optional[List[GoogleCloudApigeeV1CertInfo]] = Field(
        None, description='Chain of certificates under this name.'
    )


class GoogleCloudApigeeV1CommonNameConfig(BaseModel):
    matchWildCards: Optional[bool] = None
    name: Optional[str] = None


class GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter(BaseModel):
    scorePath: Optional[str] = Field(
        None,
        description='Optional. Return scores for this component. Example: "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/source"',
    )


class GoogleCloudApigeeV1ConfigVersion(BaseModel):
    majorVersion: Optional[int] = Field(
        None, description='Major version of the API proxy configuration schema.'
    )
    minorVersion: Optional[int] = Field(
        None, description='Minor version of the API proxy configuration schema.'
    )


class GoogleCloudApigeeV1ConnectorsPlatformConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Flag that specifies whether the Connectors Platform add-on is enabled.',
    )
    expiresAt: Optional[str] = Field(
        None,
        description='Output only. Time at which the Connectors Platform add-on expires in milliseconds since epoch. If unspecified, the add-on will never expire.',
    )


class GoogleCloudApigeeV1Credential(BaseModel):
    apiProducts: Optional[List[GoogleCloudApigeeV1ApiProductRef]] = Field(
        None, description='List of API products this credential can be used for.'
    )
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='List of attributes associated with this credential.'
    )
    consumerKey: Optional[str] = Field(None, description='Consumer key.')
    consumerSecret: Optional[str] = Field(None, description='Secret key.')
    expiresAt: Optional[str] = Field(
        None, description='Time the credential will expire in milliseconds since epoch.'
    )
    issuedAt: Optional[str] = Field(
        None, description='Time the credential was issued in milliseconds since epoch.'
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='List of scopes to apply to the app. Specified scopes must already exist on the API product that you associate with the app.',
    )
    status: Optional[str] = Field(
        None,
        description='Status of the credential. Valid values include `approved` or `revoked`.',
    )


class GoogleCloudApigeeV1CustomReportMetric(BaseModel):
    function: Optional[str] = Field(None, description='aggregate function')
    name: Optional[str] = Field(None, description='name of the metric')


class Type2(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    STRING = 'STRING'
    BOOLEAN = 'BOOLEAN'
    DATETIME = 'DATETIME'


class GoogleCloudApigeeV1DataCollector(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Output only. The time at which the data collector was created in milliseconds since the epoch.',
    )
    description: Optional[str] = Field(
        None, description='A description of the data collector.'
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. The time at which the Data Collector was last updated in milliseconds since the epoch.',
    )
    name: Optional[str] = Field(
        None, description='ID of the data collector. Must begin with `dc_`.'
    )
    type: Optional[Type2] = Field(
        None,
        description='Immutable. The type of data this data collector will collect.',
    )


class GoogleCloudApigeeV1DataCollectorConfig(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the data collector in the following format: `organizations/{org}/datacollectors/{datacollector}`',
    )
    type: Optional[Type2] = Field(
        None, description='Data type accepted by the data collector.'
    )


class GoogleCloudApigeeV1DatastoreConfig(BaseModel):
    bucketName: Optional[str] = Field(
        None,
        description='Name of the Cloud Storage bucket. Required for `gcs` target_type.',
    )
    datasetName: Optional[str] = Field(
        None, description='BigQuery dataset name Required for `bigquery` target_type.'
    )
    path: Optional[str] = Field(
        None, description='Path of Cloud Storage bucket Required for `gcs` target_type.'
    )
    projectId: Optional[str] = Field(
        None, description='Required. GCP project in which the datastore exists'
    )
    tablePrefix: Optional[str] = Field(
        None,
        description='Prefix of BigQuery table Required for `bigquery` target_type.',
    )


class GoogleCloudApigeeV1DateRange(BaseModel):
    end: Optional[str] = Field(
        None,
        description='Required. End date (exclusive) of the data to export in the format `yyyy-mm-dd`. The date range ends at 00:00:00 UTC on the end date- which will not be in the output.',
    )
    start: Optional[str] = Field(
        None,
        description='Required. Start date of the data to export in the format `yyyy-mm-dd`. The date range begins at 00:00:00 UTC on the start date.',
    )


class GoogleCloudApigeeV1DebugMask(BaseModel):
    faultJSONPaths: Optional[List[str]] = Field(
        None,
        description='List of JSON paths that specify the JSON elements to be filtered from JSON payloads in error flows.',
    )
    faultXPaths: Optional[List[str]] = Field(
        None,
        description='List of XPaths that specify the XML elements to be filtered from XML payloads in error flows.',
    )
    name: Optional[str] = Field(None, description='Name of the debug mask.')
    namespaces: Optional[Dict[str, str]] = Field(
        None, description='Map of namespaces to URIs.'
    )
    requestJSONPaths: Optional[List[str]] = Field(
        None,
        description='List of JSON paths that specify the JSON elements to be filtered from JSON request message payloads.',
    )
    requestXPaths: Optional[List[str]] = Field(
        None,
        description='List of XPaths that specify the XML elements to be filtered from XML request message payloads.',
    )
    responseJSONPaths: Optional[List[str]] = Field(
        None,
        description='List of JSON paths that specify the JSON elements to be filtered from JSON response message payloads.',
    )
    responseXPaths: Optional[List[str]] = Field(
        None,
        description='List of XPaths that specify the XML elements to be filtered from XML response message payloads.',
    )
    variables: Optional[List[str]] = Field(
        None,
        description='List of variables that should be masked from the debug output.',
    )


class GoogleCloudApigeeV1DebugSession(BaseModel):
    count: Optional[int] = Field(
        None,
        description='Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The first transaction creation timestamp, recorded by UAP.',
    )
    filter: Optional[str] = Field(
        None,
        description='Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.',
    )
    name: Optional[str] = Field(None, description='A unique ID for this DebugSession.')
    timeout: Optional[str] = Field(
        None,
        description='Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.',
    )
    tracesize: Optional[int] = Field(
        None,
        description='Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.',
    )
    validity: Optional[int] = Field(
        None,
        description="Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.",
    )


class GoogleCloudApigeeV1DeleteCustomReportResponse(BaseModel):
    message: Optional[str] = Field(
        None, description='The response contains only a message field.'
    )


class State1(Enum):
    RUNTIME_STATE_UNSPECIFIED = 'RUNTIME_STATE_UNSPECIFIED'
    READY = 'READY'
    PROGRESSING = 'PROGRESSING'
    ERROR = 'ERROR'


class GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment(BaseModel):
    apiProxy: Optional[str] = Field(
        None,
        description='Name of the deployed API proxy revision containing the base path.',
    )
    basepath: Optional[str] = Field(None, description='Base path receiving traffic.')
    environment: Optional[str] = Field(
        None, description='Name of the environment in which the proxy is deployed.'
    )
    revision: Optional[str] = Field(
        None,
        description='Name of the deployed API proxy revision containing the base path.',
    )


class GoogleCloudApigeeV1DeploymentConfig(BaseModel):
    attributes: Optional[Dict[str, str]] = Field(
        None, description='Additional key-value metadata for the deployment.'
    )
    basePath: Optional[str] = Field(
        None,
        description='Base path where the application will be hosted. Defaults to "/".',
    )
    deploymentGroups: Optional[List[str]] = Field(
        None,
        description='The list of deployment groups in which this proxy should be deployed. Not currently populated for shared flows.',
    )
    endpoints: Optional[Dict[str, str]] = Field(
        None,
        description='A mapping from basepaths to proxy endpoint names in this proxy. Not populated for shared flows.',
    )
    location: Optional[str] = Field(
        None, description='Location of the API proxy bundle as a URI.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the API or shared flow revision to be deployed in the following format: `organizations/{org}/apis/{api}/revisions/{rev}` or `organizations/{org}/sharedflows/{sharedflow}/revisions/{rev}`',
    )
    proxyUid: Optional[str] = Field(
        None, description='Unique ID of the API proxy revision.'
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='The service account identity associated with this deployment. If non-empty, will be in the following format: `projects/-/serviceAccounts/{account_email}`',
    )
    uid: Optional[str] = Field(
        None,
        description='Unique ID. The ID will only change if the deployment is deleted and recreated.',
    )


class DeploymentGroupType(Enum):
    DEPLOYMENT_GROUP_TYPE_UNSPECIFIED = 'DEPLOYMENT_GROUP_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    EXTENSIBLE = 'EXTENSIBLE'


class GoogleCloudApigeeV1DeploymentGroupConfig(BaseModel):
    deploymentGroupType: Optional[DeploymentGroupType] = Field(
        None,
        description='Type of the deployment group, which will be either Standard or Extensible.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the deployment group in the following format: `organizations/{org}/environments/{env}/deploymentGroups/{group}`.',
    )
    revisionId: Optional[str] = Field(
        None,
        description='Revision number which can be used by the runtime to detect if the deployment group has changed between two versions.',
    )
    uid: Optional[str] = Field(
        None,
        description='Unique ID. The ID will only change if the deployment group is deleted and recreated.',
    )


class GoogleCloudApigeeV1Developer(BaseModel):
    accessType: Optional[str] = Field(None, description='Access type.')
    appFamily: Optional[str] = Field(None, description='Developer app family.')
    apps: Optional[List[str]] = Field(
        None, description='List of apps associated with the developer.'
    )
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None,
        description='Optional. Developer attributes (name/value pairs). The custom attribute limit is 18.',
    )
    companies: Optional[List[str]] = Field(
        None, description='List of companies associated with the developer.'
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Time at which the developer was created in milliseconds since epoch.',
    )
    developerId: Optional[str] = Field(
        None,
        description='ID of the developer. **Note**: IDs are generated internally by Apigee and are not guaranteed to stay the same over time.',
    )
    email: Optional[str] = Field(
        None,
        description='Required. Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only.',
    )
    firstName: Optional[str] = Field(
        None, description='Required. First name of the developer.'
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Time at which the developer was last modified in milliseconds since epoch.',
    )
    lastName: Optional[str] = Field(
        None, description='Required. Last name of the developer.'
    )
    organizationName: Optional[str] = Field(
        None,
        description='Output only. Name of the Apigee organization in which the developer resides.',
    )
    status: Optional[str] = Field(
        None,
        description='Output only. Status of the developer. Valid values are `active` and `inactive`.',
    )
    userName: Optional[str] = Field(
        None,
        description='Required. User name of the developer. Not used by Apigee hybrid.',
    )


class GoogleCloudApigeeV1DeveloperApp(BaseModel):
    apiProducts: Optional[List[str]] = Field(
        None, description='List of API products associated with the developer app.'
    )
    appFamily: Optional[str] = Field(None, description='Developer app family.')
    appId: Optional[str] = Field(None, description='ID of the developer app.')
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='List of attributes for the developer app.'
    )
    callbackUrl: Optional[str] = Field(
        None,
        description='Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to developer apps.',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Time the developer app was created in milliseconds since epoch.',
    )
    credentials: Optional[List[GoogleCloudApigeeV1Credential]] = Field(
        None,
        description='Output only. Set of credentials for the developer app consisting of the consumer key/secret pairs associated with the API products.',
    )
    developerId: Optional[str] = Field(None, description='ID of the developer.')
    keyExpiresIn: Optional[str] = Field(
        None,
        description="Expiration time, in milliseconds, for the consumer key that is generated for the developer app. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.",
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Time the developer app was modified in milliseconds since epoch.',
    )
    name: Optional[str] = Field(None, description='Name of the developer app.')
    scopes: Optional[List[str]] = Field(
        None,
        description='Scopes to apply to the developer app. The specified scopes must already exist for the API product that you associate with the developer app.',
    )
    status: Optional[str] = Field(
        None,
        description='Status of the credential. Valid values include `approved` or `revoked`.',
    )


class GoogleCloudApigeeV1DeveloperAppKey(BaseModel):
    apiProducts: Optional[List] = Field(
        None,
        description='List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.',
    )
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='List of attributes associated with the credential.'
    )
    consumerKey: Optional[str] = Field(None, description='Consumer key.')
    consumerSecret: Optional[str] = Field(None, description='Secret key.')
    expiresAt: Optional[str] = Field(
        None, description='Time the developer app expires in milliseconds since epoch.'
    )
    expiresInSeconds: Optional[str] = Field(
        None,
        description="Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.",
    )
    issuedAt: Optional[str] = Field(
        None,
        description='Time the developer app was created in milliseconds since epoch.',
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.',
    )
    status: Optional[str] = Field(
        None,
        description='Status of the credential. Valid values include `approved` or `revoked`.',
    )


class BillingType(Enum):
    BILLING_TYPE_UNSPECIFIED = 'BILLING_TYPE_UNSPECIFIED'
    PREPAID = 'PREPAID'
    POSTPAID = 'POSTPAID'


class GoogleCloudApigeeV1DeveloperMonetizationConfig(BaseModel):
    billingType: Optional[BillingType] = Field(None, description='Billing type.')


class GoogleCloudApigeeV1DeveloperSubscription(BaseModel):
    apiproduct: Optional[str] = Field(
        None,
        description='Name of the API product for which the developer is purchasing a subscription.',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Time when the API product subscription was created in milliseconds since epoch.',
    )
    endTime: Optional[str] = Field(
        None,
        description='Time when the API product subscription ends in milliseconds since epoch.',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Time when the API product subscription was last modified in milliseconds since epoch.',
    )
    name: Optional[str] = Field(
        None, description='Output only. Name of the API product subscription.'
    )
    startTime: Optional[str] = Field(
        None,
        description='Time when the API product subscription starts in milliseconds since epoch.',
    )


class ConnectionState(Enum):
    CONNECTION_STATE_UNSPECIFIED = 'CONNECTION_STATE_UNSPECIFIED'
    UNAVAILABLE = 'UNAVAILABLE'
    PENDING = 'PENDING'
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'
    CLOSED = 'CLOSED'
    FROZEN = 'FROZEN'
    NEEDS_ATTENTION = 'NEEDS_ATTENTION'


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class GoogleCloudApigeeV1EndpointAttachment(BaseModel):
    connectionState: Optional[ConnectionState] = Field(
        None,
        description='Output only. State of the endpoint attachment connection to the service attachment.',
    )
    host: Optional[str] = Field(
        None,
        description='Output only. Host that can be used in either the HTTP target endpoint directly or as the host in target server.',
    )
    location: Optional[str] = Field(
        None, description='Required. Location of the endpoint attachment.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`',
    )
    serviceAttachment: Optional[str] = Field(
        None, description='Format: projects/*/regions/*/serviceAttachments/*'
    )
    state: Optional[State2] = Field(
        None,
        description='Output only. State of the endpoint attachment. Values other than `ACTIVE` mean the resource is not ready to use.',
    )


class GoogleCloudApigeeV1EndpointChainingRule(BaseModel):
    deploymentGroup: Optional[str] = Field(
        None,
        description='The deployment group to target for cross-shard chaining calls to these proxies.',
    )
    proxyIds: Optional[List[str]] = Field(
        None,
        description='List of proxy ids which may be found in the given deployment group.',
    )


class GoogleCloudApigeeV1EntityMetadata(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Time at which the API proxy was created, in milliseconds since epoch.',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Time at which the API proxy was most recently modified, in milliseconds since epoch.',
    )
    subType: Optional[str] = Field(None, description='The type of entity described')


class DeploymentType(Enum):
    DEPLOYMENT_TYPE_UNSPECIFIED = 'DEPLOYMENT_TYPE_UNSPECIFIED'
    PROXY = 'PROXY'
    ARCHIVE = 'ARCHIVE'


class GoogleCloudApigeeV1EnvironmentGroup(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Output only. The time at which the environment group was created as milliseconds since epoch.',
    )
    hostnames: Optional[List[str]] = Field(
        None, description='Required. Host names for this environment group.'
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. The time at which the environment group was last updated as milliseconds since epoch.',
    )
    name: Optional[str] = Field(None, description='ID of the environment group.')
    state: Optional[State2] = Field(
        None,
        description='Output only. State of the environment group. Values other than ACTIVE means the resource is not ready to use.',
    )


class GoogleCloudApigeeV1EnvironmentGroupAttachment(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Output only. The time at which the environment group attachment was created as milliseconds since epoch.',
    )
    environment: Optional[str] = Field(
        None, description='Required. ID of the attached environment.'
    )
    environmentGroupId: Optional[str] = Field(
        None, description='Output only. ID of the environment group.'
    )
    name: Optional[str] = Field(
        None, description='ID of the environment group attachment.'
    )


class GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest(BaseModel):
    pass


class GoogleCloudApigeeV1Export(BaseModel):
    created: Optional[str] = Field(
        None, description='Output only. Time the export job was created.'
    )
    datastoreName: Optional[str] = Field(
        None,
        description='Name of the datastore that is the destination of the export job [datastore]',
    )
    description: Optional[str] = Field(
        None, description='Description of the export job.'
    )
    error: Optional[str] = Field(
        None, description='Output only. Error is set when export fails'
    )
    executionTime: Optional[str] = Field(
        None,
        description='Output only. Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since`created`, in seconds. Else, it will set to (`updated` - `created`), in seconds.',
    )
    name: Optional[str] = Field(None, description='Display name of the export job.')
    self: Optional[str] = Field(
        None,
        description='Output only. Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: `/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`',
    )
    state: Optional[str] = Field(
        None,
        description='Output only. Status of the export job. Valid values include `enqueued`, `running`, `completed`, and `failed`.',
    )
    updated: Optional[str] = Field(
        None, description='Output only. Time the export job was last updated.'
    )


class GoogleCloudApigeeV1ExportRequest(BaseModel):
    csvDelimiter: Optional[str] = Field(
        None,
        description='Optional. Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\\t`).',
    )
    datastoreName: Optional[str] = Field(
        None, description='Required. Name of the preconfigured datastore.'
    )
    dateRange: Optional[GoogleCloudApigeeV1DateRange] = Field(
        None, description='Required. Date range of the data to export.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the export job.'
    )
    name: Optional[str] = Field(
        None, description='Required. Display name of the export job.'
    )
    outputFormat: Optional[str] = Field(
        None,
        description='Optional. Output format of the export. Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the `csvDelimiter` property.',
    )


class GoogleCloudApigeeV1FlowHook(BaseModel):
    continueOnError: Optional[bool] = Field(
        None,
        description='Optional. Flag that specifies whether execution should continue if the flow hook throws an exception. Set to `true` to continue execution. Set to `false` to stop execution if the flow hook throws an exception. Defaults to `true`.',
    )
    description: Optional[str] = Field(
        None, description='Description of the flow hook.'
    )
    flowHookPoint: Optional[str] = Field(
        None,
        description='Output only. Where in the API call flow the flow hook is invoked. Must be one of `PreProxyFlowHook`, `PostProxyFlowHook`, `PreTargetFlowHook`, or `PostTargetFlowHook`.',
    )
    sharedFlow: Optional[str] = Field(
        None,
        description='Shared flow attached to this flow hook, or empty if there is none attached.',
    )


class GoogleCloudApigeeV1FlowHookConfig(BaseModel):
    continueOnError: Optional[bool] = Field(
        None,
        description='Flag that specifies whether the flow should abort after an error in the flow hook. Defaults to `true` (continue on error).',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the flow hook in the following format: `organizations/{org}/environments/{env}/flowhooks/{point}`. Valid `point` values include: `PreProxyFlowHook`, `PostProxyFlowHook`, `PreTargetFlowHook`, and `PostTargetFlowHook`',
    )
    sharedFlowName: Optional[str] = Field(
        None,
        description='Name of the shared flow to invoke in the following format: `organizations/{org}/sharedflows/{sharedflow}`',
    )


class GoogleCloudApigeeV1GenerateDownloadUrlRequest(BaseModel):
    pass


class GoogleCloudApigeeV1GenerateDownloadUrlResponse(BaseModel):
    downloadUri: Optional[str] = Field(
        None,
        description='The Google Cloud Storage signed URL that can be used to download the Archive zip file.',
    )


class GoogleCloudApigeeV1GenerateUploadUrlRequest(BaseModel):
    pass


class GoogleCloudApigeeV1GenerateUploadUrlResponse(BaseModel):
    uploadUri: Optional[str] = Field(
        None,
        description='The Google Cloud Storage signed URL that can be used to upload a new Archive zip file.',
    )


class GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo(BaseModel):
    md5: Optional[str] = Field(None, description='The MD5 Hash of the JSON data')
    sizeBytes: Optional[str] = Field(
        None, description='The size of the returned file in bytes'
    )
    uri: Optional[str] = Field(
        None,
        description='The signed URL of the JSON data. Will be of the form `https://storage.googleapis.com/example-bucket/cat.jpeg?X-Goog-Algorithm= GOOG4-RSA-SHA256&X-Goog-Credential=example%40example-project.iam.gserviceaccount .com%2F20181026%2Fus-central1%2Fstorage%2Fgoog4_request&X-Goog-Date=20181026T18 1309Z&X-Goog-Expires=900&X-Goog-SignedHeaders=host&X-Goog-Signature=247a2aa45f16 9edf4d187d54e7cc46e4731b1e6273242c4f4c39a1d2507a0e58706e25e3a85a7dbb891d62afa849 6def8e260c1db863d9ace85ff0a184b894b117fe46d1225c82f2aa19efd52cf21d3e2022b3b868dc c1aca2741951ed5bf3bb25a34f5e9316a2841e8ff4c530b22ceaa1c5ce09c7cbb5732631510c2058 0e61723f5594de3aea497f195456a2ff2bdd0d13bad47289d8611b6f9cfeef0c46c91a455b94e90a 66924f722292d21e24d31dcfb38ce0c0f353ffa5a9756fc2a9f2b40bc2113206a81e324fc4fd6823 a29163fa845c8ae7eca1fcf6e5bb48b3200983c56c5ca81fffb151cca7402beddfc4a76b13344703 2ea7abedc098d2eb14a7`',
    )


class GoogleCloudApigeeV1GetSyncAuthorizationRequest(BaseModel):
    pass


class GoogleCloudApigeeV1GraphQLOperation(BaseModel):
    operation: Optional[str] = Field(
        None,
        description='GraphQL operation name. The name and operation type will be used to apply quotas. If no name is specified, the quota will be applied to all GraphQL operations irrespective of their operation names in the payload.',
    )
    operationTypes: Optional[List[str]] = Field(
        None,
        description='Required. GraphQL operation types. Valid values include `query` or `mutation`. **Note**: Apigee does not currently support `subscription` types.',
    )


class PeeringCidrRange(Enum):
    CIDR_RANGE_UNSPECIFIED = 'CIDR_RANGE_UNSPECIFIED'
    SLASH_16 = 'SLASH_16'
    SLASH_17 = 'SLASH_17'
    SLASH_18 = 'SLASH_18'
    SLASH_19 = 'SLASH_19'
    SLASH_20 = 'SLASH_20'
    SLASH_22 = 'SLASH_22'
    SLASH_23 = 'SLASH_23'


class GoogleCloudApigeeV1Instance(BaseModel):
    consumerAcceptList: Optional[List[str]] = Field(
        None,
        description='Optional. Customer accept list represents the list of projects (id/number) on customer side that can privately connect to the service attachment. It is an optional field which the customers can provide during the instance creation. By default, the customer project associated with the Apigee organization will be included to the list.',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Time the instance was created in milliseconds since epoch.',
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the instance.'
    )
    diskEncryptionKeyName: Optional[str] = Field(
        None,
        description='Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only. Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`',
    )
    displayName: Optional[str] = Field(
        None, description='Optional. Display name for the instance.'
    )
    host: Optional[str] = Field(
        None,
        description='Output only. Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.',
    )
    ipRange: Optional[str] = Field(
        None,
        description='Optional. Comma-separated list of CIDR blocks of length 22 and/or 28 used to create the Apigee instance. Providing CIDR ranges is optional. You can provide just /22 or /28 or both (or neither). Ranges you provide should be freely available as part of a larger named range you have allocated to the Service Networking peering. If this parameter is not provided, Apigee automatically requests an available /22 and /28 CIDR block from Service Networking. Use the /22 CIDR block for configuring your firewall needs to allow traffic from Apigee. Input formats: `a.b.c.d/22` or `e.f.g.h/28` or `a.b.c.d/22,e.f.g.h/28`',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Time the instance was last modified in milliseconds since epoch.',
    )
    location: Optional[str] = Field(
        None,
        description='Required. Compute Engine location where the instance resides.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Resource ID of the instance. Values must match the regular expression `^a-z{0,30}[a-z\\d]$`.',
    )
    peeringCidrRange: Optional[PeeringCidrRange] = Field(
        None,
        description='Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support `SLASH_16` to `SLASH_20` and defaults to `SLASH_16`. Evaluation organizations support only `SLASH_23`.',
    )
    port: Optional[str] = Field(
        None, description='Output only. Port number of the exposed Apigee endpoint.'
    )
    runtimeVersion: Optional[str] = Field(
        None,
        description='Output only. Version of the runtime system running in the instance. The runtime system is the set of components that serve the API Proxy traffic in your Environments.',
    )
    serviceAttachment: Optional[str] = Field(
        None,
        description='Output only. Resource name of the service attachment created for the instance in the format: `projects/*/regions/*/serviceAttachments/*` Apigee customers can privately forward traffic to this service attachment using the PSC endpoints.',
    )
    state: Optional[State2] = Field(
        None,
        description='Output only. State of the instance. Values other than `ACTIVE` means the resource is not ready to use.',
    )


class GoogleCloudApigeeV1InstanceAttachment(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Time the attachment was created in milliseconds since epoch.',
    )
    environment: Optional[str] = Field(
        None, description='ID of the attached environment.'
    )
    name: Optional[str] = Field(None, description='Output only. ID of the attachment.')


class GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision(BaseModel):
    percentage: Optional[int] = Field(
        None, description='Percentage of MP replicas reporting this revision.'
    )
    revision: Optional[str] = Field(
        None, description='API proxy revision reported as deployed.'
    )


class GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute(BaseModel):
    basepath: Optional[str] = Field(None, description='Base path in the routing table.')
    envgroup: Optional[str] = Field(
        None, description='Environment group where this route is installed.'
    )
    environment: Optional[str] = Field(
        None,
        description='Destination environment. This will be empty if the route is not yet reported.',
    )
    percentage: Optional[int] = Field(
        None, description='Percentage of ingress replicas reporting this route.'
    )


class GoogleCloudApigeeV1IntegrationConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Flag that specifies whether the Integration add-on is enabled.',
    )


class GoogleCloudApigeeV1KeyAliasReference(BaseModel):
    aliasId: Optional[str] = Field(
        None,
        description='Alias ID. Must exist in the keystore referred to by the reference.',
    )
    reference: Optional[str] = Field(
        None,
        description='Reference name in the following format: `organizations/{org}/environments/{env}/references/{reference}`',
    )


class GoogleCloudApigeeV1KeyValueEntry(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Resource URI that can be used to identify the scope of the key value map entries.',
    )
    value: Optional[str] = Field(
        None,
        description='Required. Data or payload that is being retrieved and associated with the unique key.',
    )


class GoogleCloudApigeeV1KeyValueMap(BaseModel):
    encrypted: Optional[bool] = Field(
        None,
        description='Required. Flag that specifies whether entry values will be encrypted. This field is retained for backward compatibility and the value of encrypted will always be `true`. Apigee X and hybrid do not support unencrypted key value maps.',
    )
    name: Optional[str] = Field(None, description='Required. ID of the key value map.')


class GoogleCloudApigeeV1Keystore(BaseModel):
    aliases: Optional[List[str]] = Field(
        None, description='Output only. Aliases in this keystore.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Resource ID for this keystore. Values must match the regular expression `[\\w[:space:].-]{1,255}`.',
    )


class GoogleCloudApigeeV1KeystoreConfig(BaseModel):
    aliases: Optional[List[GoogleCloudApigeeV1AliasRevisionConfig]] = Field(
        None, description='Aliases in the keystore.'
    )
    name: Optional[str] = Field(
        None,
        description='Resource name in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}`',
    )


class GoogleCloudApigeeV1ListApiCategoriesResponse(BaseModel):
    data: Optional[List[GoogleCloudApigeeV1ApiCategoryData]] = Field(
        None, description='Details of categories.'
    )
    errorCode: Optional[str] = Field(
        None, description='ID that can be used to find errors in the log files.'
    )
    message: Optional[str] = Field(None, description='Description of the operation.')
    requestId: Optional[str] = Field(
        None,
        description='ID that can be used to find request details in the log files.',
    )
    status: Optional[str] = Field(None, description='Status of the operation.')


class GoogleCloudApigeeV1ListArchiveDeploymentsResponse(BaseModel):
    archiveDeployments: Optional[List[GoogleCloudApigeeV1ArchiveDeployment]] = Field(
        None, description='Archive Deployments in the specified environment.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListArchiveDeployments request to retrieve the next page. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListDataCollectorsResponse(BaseModel):
    dataCollectors: Optional[List[GoogleCloudApigeeV1DataCollector]] = Field(
        None, description='Data collectors in the specified organization.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListDataCollectors request to retrieve the next page. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListDeveloperAppsResponse(BaseModel):
    app: Optional[List[GoogleCloudApigeeV1DeveloperApp]] = Field(
        None, description='List of developer apps and their credentials.'
    )


class GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse(BaseModel):
    developerSubscriptions: Optional[List[GoogleCloudApigeeV1DeveloperSubscription]] = (
        Field(None, description='List of all subscriptions.')
    )
    nextStartKey: Optional[str] = Field(
        None,
        description='Value that can be sent as `startKey` to retrieve the next page of content. If this field is omitted, there are no subsequent pages.',
    )


class GoogleCloudApigeeV1ListEndpointAttachmentsResponse(BaseModel):
    endpointAttachments: Optional[List[GoogleCloudApigeeV1EndpointAttachment]] = Field(
        None, description='Endpoint attachments in the specified organization.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in an `ListEndpointAttachments` request to retrieve the next page. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse(BaseModel):
    environmentGroupAttachments: Optional[
        List[GoogleCloudApigeeV1EnvironmentGroupAttachment]
    ] = Field(
        None,
        description='EnvironmentGroupAttachments for the specified environment group.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListEnvironmentGroupAttachments request to retrieve the next page. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListEnvironmentGroupsResponse(BaseModel):
    environmentGroups: Optional[List[GoogleCloudApigeeV1EnvironmentGroup]] = Field(
        None, description='EnvironmentGroups in the specified organization.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListEnvironmentGroups request to retrieve the next page. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListExportsResponse(BaseModel):
    exports: Optional[List[GoogleCloudApigeeV1Export]] = Field(
        None, description='Details of the export jobs.'
    )


class GoogleCloudApigeeV1ListInstanceAttachmentsResponse(BaseModel):
    attachments: Optional[List[GoogleCloudApigeeV1InstanceAttachment]] = Field(
        None, description='Attachments for the instance.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListInstanceAttachments request to retrieve the next page of content. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListInstancesResponse(BaseModel):
    instances: Optional[List[GoogleCloudApigeeV1Instance]] = Field(
        None, description='Instances in the specified organization.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListInstance request to retrieve the next page of content. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListKeyValueEntriesResponse(BaseModel):
    keyValueEntries: Optional[List[GoogleCloudApigeeV1KeyValueEntry]] = Field(
        None, description='One or more key value map keys and values.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token that can be sent as `next_page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class GoogleCloudApigeeV1ListOfDevelopersResponse(BaseModel):
    developer: Optional[List[GoogleCloudApigeeV1Developer]] = Field(
        None, description='List of developers.'
    )


class GoogleCloudApigeeV1Metadata(BaseModel):
    errors: Optional[List[str]] = Field(
        None, description='List of error messages as strings.'
    )
    notices: Optional[List[str]] = Field(
        None,
        description='List of additional information such as data source, if result was truncated. For example: ``` "notices": [ "Source:Postgres", "PG Host:uappg0rw.e2e.apigeeks.net", "query served by:4b64601e-40de-4eb1-bfb9-eeee7ac929ed", "Table used: edge.api.uapgroup2.agg_api" ]```',
    )


class GoogleCloudApigeeV1Metric(BaseModel):
    name: Optional[str] = Field(None, description='Metric name.')
    values: Optional[List] = Field(
        None,
        description='List of metric values. Possible value formats include: `"values":["39.0"]` or `"values":[ { "value": "39.0", "timestamp": 1232434354} ]`',
    )


class Aggregation(Enum):
    AGGREGATION_FUNCTION_UNSPECIFIED = 'AGGREGATION_FUNCTION_UNSPECIFIED'
    AVG = 'AVG'
    SUM = 'SUM'
    MIN = 'MIN'
    MAX = 'MAX'
    COUNT_DISTINCT = 'COUNT_DISTINCT'


class Order(Enum):
    ORDER_UNSPECIFIED = 'ORDER_UNSPECIFIED'
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class GoogleCloudApigeeV1MetricAggregation(BaseModel):
    aggregation: Optional[Aggregation] = Field(
        None, description='Aggregation function associated with the metric.'
    )
    name: Optional[str] = Field(None, description='Name of the metric')
    order: Optional[Order] = Field(
        None,
        description='Ordering for this aggregation in the result. For time series this is ignored since the ordering of points depends only on the timestamp, not the values.',
    )


class GoogleCloudApigeeV1MonetizationConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Flag that specifies whether the Monetization add-on is enabled.',
    )


class State6(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    RESERVED = 'RESERVED'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'


class GoogleCloudApigeeV1NatAddress(BaseModel):
    ipAddress: Optional[str] = Field(
        None, description='Output only. The static IPV4 address.'
    )
    name: Optional[str] = Field(
        None, description='Required. Resource ID of the NAT address.'
    )
    state: Optional[State6] = Field(
        None, description='Output only. State of the nat address.'
    )


class GoogleCloudApigeeV1NodeConfig(BaseModel):
    currentAggregateNodeCount: Optional[str] = Field(
        None,
        description='Output only. The current total number of gateway nodes that each environment currently has across all instances.',
    )
    maxNodeCount: Optional[str] = Field(
        None,
        description='Optional. The maximum total number of gateway nodes that the is reserved for all instances that has the specified environment. If not specified, the default is determined by the recommended maximum number of nodes for that gateway.',
    )
    minNodeCount: Optional[str] = Field(
        None,
        description='Optional. The minimum total number of gateway nodes that the is reserved for all instances that has the specified environment. If not specified, the default is determined by the recommended minimum number of nodes for that gateway.',
    )


class GoogleCloudApigeeV1Operation(BaseModel):
    methods: Optional[List[str]] = Field(
        None,
        description='methods refers to the REST verbs as in https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html. When none specified, all verb types are allowed.',
    )
    resource: Optional[str] = Field(
        None,
        description='Required. REST resource path associated with the API proxy or remote service.',
    )


class OperationType(Enum):
    OPERATION_TYPE_UNSPECIFIED = 'OPERATION_TYPE_UNSPECIFIED'
    INSERT = 'INSERT'
    DELETE = 'DELETE'
    UPDATE = 'UPDATE'


class State7(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    FINISHED = 'FINISHED'


class GoogleCloudApigeeV1OperationMetadataProgress(BaseModel):
    description: Optional[str] = Field(
        None, description="Description of the operation's progress."
    )
    details: Optional[Dict[str, Any]] = Field(
        None, description='The additional details of the progress.'
    )
    percentDone: Optional[int] = Field(
        None, description='The percentage of the operation progress.'
    )
    state: Optional[State7] = Field(None, description='State of the operation.')


class GoogleCloudApigeeV1OptimizedStatsNode(BaseModel):
    data: Optional[List] = None


class GoogleCloudApigeeV1OptimizedStatsResponse(BaseModel):
    TimeUnit: Optional[List[str]] = Field(
        None,
        description='List of time unit values. Time unit refers to an epoch timestamp value.',
    )
    metaData: Optional[GoogleCloudApigeeV1Metadata] = Field(
        None, description='Metadata information about the query executed.'
    )
    resultTruncated: Optional[bool] = Field(
        None,
        description='Boolean flag that indicates whether the results were truncated based on the limit parameter.',
    )
    stats: Optional[GoogleCloudApigeeV1OptimizedStatsNode] = Field(
        None, description='`stats` results.'
    )


class BillingType1(Enum):
    BILLING_TYPE_UNSPECIFIED = 'BILLING_TYPE_UNSPECIFIED'
    SUBSCRIPTION = 'SUBSCRIPTION'
    EVALUATION = 'EVALUATION'
    PAYG = 'PAYG'


class RuntimeType(Enum):
    RUNTIME_TYPE_UNSPECIFIED = 'RUNTIME_TYPE_UNSPECIFIED'
    CLOUD = 'CLOUD'
    HYBRID = 'HYBRID'


class State9(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class SubscriptionType(Enum):
    SUBSCRIPTION_TYPE_UNSPECIFIED = 'SUBSCRIPTION_TYPE_UNSPECIFIED'
    PAID = 'PAID'
    TRIAL = 'TRIAL'


class Type4(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    TYPE_TRIAL = 'TYPE_TRIAL'
    TYPE_PAID = 'TYPE_PAID'
    TYPE_INTERNAL = 'TYPE_INTERNAL'


class GoogleCloudApigeeV1OrganizationProjectMapping(BaseModel):
    location: Optional[str] = Field(
        None,
        description='Output only. The Google Cloud region where control plane data is located. For more information, see https://cloud.google.com/about/locations/.',
    )
    organization: Optional[str] = Field(
        None, description='Name of the Apigee organization.'
    )
    projectId: Optional[str] = Field(
        None, description='Google Cloud project associated with the Apigee organization'
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='DEPRECATED: Use `project_id`. An Apigee Organization is mapped to a single project.',
    )


class GoogleCloudApigeeV1PodStatus(BaseModel):
    appVersion: Optional[str] = Field(
        None, description='Version of the application running in the pod.'
    )
    deploymentStatus: Optional[str] = Field(
        None,
        description='Status of the deployment. Valid values include: - `deployed`: Successful. - `error` : Failed. - `pending` : Pod has not yet reported on the deployment.',
    )
    deploymentStatusTime: Optional[str] = Field(
        None,
        description='Time the deployment status was reported in milliseconds since epoch.',
    )
    deploymentTime: Optional[str] = Field(
        None, description='Time the proxy was deployed in milliseconds since epoch.'
    )
    podName: Optional[str] = Field(
        None, description='Name of the pod which is reporting the status.'
    )
    podStatus: Optional[str] = Field(
        None,
        description='Overall status of the pod (not this specific deployment). Valid values include: - `active`: Up to date. - `stale` : Recently out of date. Pods that have not reported status in a long time are excluded from the output.',
    )
    podStatusTime: Optional[str] = Field(
        None,
        description='Time the pod status was reported in milliseconds since epoch.',
    )
    statusCode: Optional[str] = Field(
        None, description='Code associated with the deployment status.'
    )
    statusCodeDetails: Optional[str] = Field(
        None, description='Human-readable message associated with the status code.'
    )


class GoogleCloudApigeeV1Property(BaseModel):
    name: Optional[str] = Field(None, description='The property key')
    value: Optional[str] = Field(None, description='The property value')


class GoogleCloudApigeeV1ProvisionOrganizationRequest(BaseModel):
    analyticsRegion: Optional[str] = Field(
        None,
        description='Primary Cloud Platform region for analytics data storage. For valid values, see [Create an organization](https://cloud.google.com/apigee/docs/hybrid/latest/precog-provision). Defaults to `us-west1`.',
    )
    authorizedNetwork: Optional[str] = Field(
        None,
        description='Compute Engine network used for Service Networking to be peered with Apigee runtime instances. See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started). Apigee also supports shared VPC (that is, the host network project is not the same as the one that is peering with Apigee). See [Shared VPC overview](https://cloud.google.com/vpc/docs/shared-vpc). To use a shared VPC network, use the following format: `projects/{host-project-id}/{region}/networks/{network-name}`. For example: `projects/my-sharedvpc-host/global/networks/mynetwork`',
    )
    runtimeLocation: Optional[str] = Field(
        None,
        description='Cloud Platform location for the runtime instance. Defaults to zone `us-west1-a`. If a region is provided, `EVAL` organizations will use the region for automatically selecting a zone for the runtime instance.',
    )


class GoogleCloudApigeeV1QueryMetadata(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None, description='Dimensions of the AsyncQuery.'
    )
    endTimestamp: Optional[str] = Field(
        None, description='End timestamp of the query range.'
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics of the AsyncQuery. Example: ["name:message_count,func:sum,alias:sum_message_count"]',
    )
    outputFormat: Optional[str] = Field(None, description='Output format.')
    startTimestamp: Optional[str] = Field(
        None, description='Start timestamp of the query range.'
    )
    timeUnit: Optional[str] = Field(None, description='Query GroupBy time unit.')


class GoogleCloudApigeeV1QueryMetric(BaseModel):
    alias: Optional[str] = Field(
        None,
        description='Alias for the metric. Alias will be used to replace metric name in query results.',
    )
    function: Optional[str] = Field(
        None, description='Aggregation function: avg, min, max, or sum.'
    )
    name: Optional[str] = Field(None, description='Required. Metric name.')
    operator: Optional[str] = Field(None, description='One of `+`, `-`, `/`, `%`, `*`.')
    value: Optional[str] = Field(
        None, description='Operand value should be provided when operator is set.'
    )


class GoogleCloudApigeeV1QueryTabularStatsResponse(BaseModel):
    columns: Optional[List[str]] = Field(
        None,
        description='Column names corresponding to the same order as the inner values in the stats field.',
    )
    nextPageToken: Optional[str] = Field(None, description='Next page token.')
    values: Optional[List[List]] = Field(
        None, description='Resultant rows from the executed query.'
    )


class TimestampOrder(Enum):
    ORDER_UNSPECIFIED = 'ORDER_UNSPECIFIED'
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class WindowSize(Enum):
    WINDOW_SIZE_UNSPECIFIED = 'WINDOW_SIZE_UNSPECIFIED'
    MINUTE = 'MINUTE'
    HOUR = 'HOUR'
    DAY = 'DAY'
    MONTH = 'MONTH'


class GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence(BaseModel):
    dimensions: Optional[Dict[str, str]] = Field(
        None,
        description='Map of dimensions and their values that uniquely identifies a time series sequence.',
    )
    points: Optional[List[List]] = Field(
        None,
        description='List of points. First value of each inner list is a timestamp.',
    )


class GoogleCloudApigeeV1Quota(BaseModel):
    interval: Optional[str] = Field(
        None,
        description='Required. Time interval over which the number of request messages is calculated.',
    )
    limit: Optional[str] = Field(
        None,
        description='Required. Upper limit allowed for the time interval and time unit specified. Requests exceeding this limit will be rejected.',
    )
    timeUnit: Optional[str] = Field(
        None,
        description='Time unit defined for the `interval`. Valid values include `minute`, `hour`, `day`, or `month`. If `limit` and `interval` are valid, the default value is `hour`; otherwise, the default is null.',
    )


class BillingPeriod(Enum):
    BILLING_PERIOD_UNSPECIFIED = 'BILLING_PERIOD_UNSPECIFIED'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'


class ConsumptionPricingType(Enum):
    CONSUMPTION_PRICING_TYPE_UNSPECIFIED = 'CONSUMPTION_PRICING_TYPE_UNSPECIFIED'
    FIXED_PER_UNIT = 'FIXED_PER_UNIT'
    BANDED = 'BANDED'
    TIERED = 'TIERED'
    STAIRSTEP = 'STAIRSTEP'


class PaymentFundingModel(Enum):
    PAYMENT_FUNDING_MODEL_UNSPECIFIED = 'PAYMENT_FUNDING_MODEL_UNSPECIFIED'
    PREPAID = 'PREPAID'
    POSTPAID = 'POSTPAID'


class RevenueShareType(Enum):
    REVENUE_SHARE_TYPE_UNSPECIFIED = 'REVENUE_SHARE_TYPE_UNSPECIFIED'
    FIXED = 'FIXED'
    VOLUME_BANDED = 'VOLUME_BANDED'


class State10(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    PUBLISHED = 'PUBLISHED'


class GoogleCloudApigeeV1Reference(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. A human-readable description of this reference.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. The resource id of this reference. Values must match the regular expression [\\w\\s\\-.]+.',
    )
    refers: Optional[str] = Field(
        None,
        description='Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resource_type.',
    )
    resourceType: Optional[str] = Field(
        None,
        description="The type of resource referred to by this reference. Valid values are 'KeyStore' or 'TrustStore'.",
    )


class GoogleCloudApigeeV1ReferenceConfig(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the reference in the following format: `organizations/{org}/environments/{env}/references/{reference}`',
    )
    resourceName: Optional[str] = Field(
        None,
        description='Name of the referenced resource in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}` Only references to keystore resources are supported.',
    )


class GoogleCloudApigeeV1ReportInstanceStatusResponse(BaseModel):
    pass


class GoogleCloudApigeeV1ReportProperty(BaseModel):
    property: Optional[str] = Field(None, description='name of the property')
    value: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='property values'
    )


class GoogleCloudApigeeV1ResourceConfig(BaseModel):
    location: Optional[str] = Field(
        None, description='Location of the resource as a URI.'
    )
    name: Optional[str] = Field(
        None,
        description='Resource name in the following format: `organizations/{org}/environments/{env}/resourcefiles/{type}/{file}/revisions/{rev}` Only environment-scoped resource files are supported.',
    )


class GoogleCloudApigeeV1ResourceFile(BaseModel):
    name: Optional[str] = Field(None, description='ID of the resource file.')
    type: Optional[str] = Field(
        None, description='Resource file type. {{ resource_file_type }}'
    )


class GoogleCloudApigeeV1ResourceFiles(BaseModel):
    resourceFile: Optional[List[GoogleCloudApigeeV1ResourceFile]] = Field(
        None, description='List of resource files.'
    )


class GoogleCloudApigeeV1RevenueShareRange(BaseModel):
    end: Optional[str] = Field(
        None,
        description='Ending value of the range. Set to 0 or `null` for the last range of values.',
    )
    sharePercentage: Optional[float] = Field(
        None,
        description='Percentage of the revenue to be shared with the developer. For example, to share 21 percent of the total revenue with the developer, set this value to 21. Specify a decimal number with a maximum of two digits following the decimal point.',
    )
    start: Optional[str] = Field(
        None,
        description='Starting value of the range. Set to 0 or `null` for the initial range of values.',
    )


class GoogleCloudApigeeV1RoutingRule(BaseModel):
    basepath: Optional[str] = Field(
        None,
        description='URI path prefix used to route to the specified environment. May contain one or more wildcards. For example, path segments consisting of a single `*` character will match any string.',
    )
    deploymentGroup: Optional[str] = Field(
        None,
        description='Name of a deployment group in an environment bound to the environment group in the following format: `organizations/{org}/environment/{env}/deploymentGroups/{group}` Only one of environment or deployment_group will be set.',
    )
    envGroupRevision: Optional[str] = Field(
        None,
        description='The env group config revision_id when this rule was added or last updated. This value is set when the rule is created and will only update if the the environment_id changes. It is used to determine if the runtime is up to date with respect to this rule. This field is omitted from the IngressConfig unless the GetDeployedIngressConfig API is called with view=FULL.',
    )
    environment: Optional[str] = Field(
        None,
        description='Name of an environment bound to the environment group in the following format: `organizations/{org}/environments/{env}`. Only one of environment or deployment_group will be set.',
    )
    otherTargets: Optional[List[str]] = Field(
        None,
        description='Conflicting targets, which will be resource names specifying either deployment groups or environments.',
    )
    receiver: Optional[str] = Field(
        None,
        description='The resource name of the proxy revision that is receiving this basepath in the following format: `organizations/{org}/apis/{api}/revisions/{rev}`. This field is omitted from the IngressConfig unless the GetDeployedIngressConfig API is called with view=FULL.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='The unix timestamp when this rule was updated. This is updated whenever env_group_revision is updated. This field is omitted from the IngressConfig unless the GetDeployedIngressConfig API is called with view=FULL.',
    )


class GoogleCloudApigeeV1RuntimeConfig(BaseModel):
    analyticsBucket: Optional[str] = Field(
        None, description='Cloud Storage bucket used for uploading Analytics records.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the resource in the following format: `organizations/{org}/runtimeConfig`.',
    )
    tenantProjectId: Optional[str] = Field(
        None,
        description="Output only. Tenant project ID associated with the Apigee organization. The tenant project is used to host Google-managed resources that are dedicated to this Apigee organization. Clients have limited access to resources within the tenant project used to support Apigee runtime instances. Access to the tenant project is managed using SetSyncAuthorization. It can be empty if the tenant project hasn't been created yet.",
    )
    traceBucket: Optional[str] = Field(
        None, description='Cloud Storage bucket used for uploading Trace records.'
    )


class Exporter(Enum):
    EXPORTER_UNSPECIFIED = 'EXPORTER_UNSPECIFIED'
    JAEGER = 'JAEGER'
    CLOUD_TRACE = 'CLOUD_TRACE'


class Sampler(Enum):
    SAMPLER_UNSPECIFIED = 'SAMPLER_UNSPECIFIED'
    OFF = 'OFF'
    PROBABILITY = 'PROBABILITY'


class GoogleCloudApigeeV1RuntimeTraceSamplingConfig(BaseModel):
    sampler: Optional[Sampler] = Field(
        None, description='Sampler of distributed tracing. OFF is the default value.'
    )
    samplingRate: Optional[float] = Field(
        None,
        description='Field sampling rate. This value is only applicable when using the PROBABILITY sampler. The supported values are > 0 and <= 0.5.',
    )


class GoogleCloudApigeeV1SchemaSchemaProperty(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Time the field was created in RFC3339 string form. For example: `2016-02-26T10:23:09.592Z`.',
    )
    custom: Optional[str] = Field(
        None,
        description='Flag that specifies whether the field is standard in the dataset or a custom field created by the customer. `true` indicates that it is a custom field.',
    )
    type: Optional[str] = Field(None, description='Data type of the field.')


class GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext(BaseModel):
    documentationLink: Optional[str] = Field(
        None, description='Documentation link for the action.'
    )


class RiskLevel(Enum):
    RISK_LEVEL_UNSPECIFIED = 'RISK_LEVEL_UNSPECIFIED'
    LOW = 'LOW'
    MODERATE = 'MODERATE'
    SEVERE = 'SEVERE'


class GoogleCloudApigeeV1SecurityIncident(BaseModel):
    detectionTypes: Optional[List[str]] = Field(
        None,
        description='Output only. Detection types which are part of the incident. Examples: Flooder, OAuth Abuser, Static Content Scraper, Anomaly Detection.',
    )
    displayName: Optional[str] = Field(
        None, description='Display name of the security incident.'
    )
    firstDetectedTime: Optional[str] = Field(
        None,
        description='Output only. The time when events associated with the incident were first detected.',
    )
    lastDetectedTime: Optional[str] = Field(
        None,
        description='Output only. The time when events associated with the incident were last detected.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. Name of the security incident resource. Format: organizations/{org}/environments/{environment}/securityIncidents/{incident} Example: organizations/apigee-org/environments/dev/securityIncidents/1234-5678-9101-1111',
    )
    riskLevel: Optional[RiskLevel] = Field(
        None, description='Output only. Risk level of the incident.'
    )
    trafficCount: Optional[str] = Field(
        None, description='Total traffic detected as part of the incident.'
    )


class GoogleCloudApigeeV1SecurityProfileEnvironment(BaseModel):
    attachTime: Optional[str] = Field(
        None,
        description='Output only. Time at which environment was attached to the security profile.',
    )
    environment: Optional[str] = Field(
        None, description='Output only. Name of the environment.'
    )


class GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation(BaseModel):
    attachTime: Optional[str] = Field(
        None,
        description='Output only. The time when environment was attached to the security profile.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. Name of the profile-environment association resource. Format: organizations/{org}/securityProfiles/{profile}/environments/{env}',
    )
    securityProfileRevisionId: Optional[str] = Field(
        None, description='Revision ID of the security profile.'
    )


class GoogleCloudApigeeV1SecurityProfileScoringConfig(BaseModel):
    description: Optional[str] = Field(None, description='Description of the config.')
    scorePath: Optional[str] = Field(
        None, description='Path of the component config used for scoring.'
    )
    title: Optional[str] = Field(None, description='Title of the config.')


class GoogleCloudApigeeV1SecurityReportMetadata(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None, description='Dimensions of the SecurityReport.'
    )
    endTimestamp: Optional[str] = Field(
        None, description='End timestamp of the query range.'
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics of the SecurityReport. Example: ["name:bot_count,func:sum,alias:sum_bot_count"]',
    )
    mimeType: Optional[str] = Field(None, description='MIME type / Output format.')
    startTimestamp: Optional[str] = Field(
        None, description='Start timestamp of the query range.'
    )
    timeUnit: Optional[str] = Field(
        None,
        description='Query GroupBy time unit. Example: "seconds", "minute", "hour"',
    )


class GoogleCloudApigeeV1SecurityReportQueryMetric(BaseModel):
    aggregationFunction: Optional[str] = Field(
        None, description='Aggregation function: avg, min, max, or sum.'
    )
    alias: Optional[str] = Field(
        None,
        description='Alias for the metric. Alias will be used to replace metric name in query results.',
    )
    name: Optional[str] = Field(None, description='Required. Metric name.')
    operator: Optional[str] = Field(None, description='One of `+`, `-`, `/`, `%`, `*`.')
    value: Optional[str] = Field(
        None, description='Operand value should be provided when operator is set.'
    )


class GoogleCloudApigeeV1SecurityReportResultMetadata(BaseModel):
    expires: Optional[str] = Field(
        None,
        description='Output only. Expire_time is set to 7 days after report creation. Query result will be unaccessable after this time. Example: "2021-05-04T13:38:52-07:00"',
    )
    self: Optional[str] = Field(
        None,
        description='Self link of the query results. Example: `/organizations/myorg/environments/myenv/securityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result` or following format if query is running at host level: `/organizations/myorg/hostSecurityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result`',
    )


class GoogleCloudApigeeV1SecurityReportResultView(BaseModel):
    code: Optional[int] = Field(None, description='Error code when there is a failure.')
    error: Optional[str] = Field(
        None, description='Error message when there is a failure.'
    )
    metadata: Optional[GoogleCloudApigeeV1SecurityReportMetadata] = Field(
        None,
        description='Metadata contains information like metrics, dimenstions etc of the security report.',
    )
    rows: Optional[List] = Field(
        None,
        description='Rows of security report result. Each row is a JSON object. Example: {sum(message_count): 1, developer_app: "(not set)",…}',
    )
    state: Optional[str] = Field(None, description='State of retrieving ResultView.')


class GoogleCloudApigeeV1ServiceIssuersMapping(BaseModel):
    emailIds: Optional[List[str]] = Field(
        None, description='List of trusted issuer email ids.'
    )
    service: Optional[str] = Field(
        None, description='String indicating the Apigee service name.'
    )


class GoogleCloudApigeeV1Session(BaseModel):
    id: Optional[str] = Field(None, description='The debug session ID.')
    timestampMs: Optional[str] = Field(
        None,
        description='The first transaction creation timestamp in millisecond, recorded by UAP.',
    )


class GoogleCloudApigeeV1SharedFlow(BaseModel):
    latestRevisionId: Optional[str] = Field(
        None,
        description='The id of the most recently created revision for this shared flow.',
    )
    metaData: Optional[GoogleCloudApigeeV1EntityMetadata] = Field(
        None, description='Metadata describing the shared flow.'
    )
    name: Optional[str] = Field(None, description='The ID of the shared flow.')
    revision: Optional[List[str]] = Field(
        None, description='A list of revisions of this shared flow.'
    )


class GoogleCloudApigeeV1SharedFlowRevision(BaseModel):
    configurationVersion: Optional[GoogleCloudApigeeV1ConfigVersion] = Field(
        None,
        description='The version of the configuration schema to which this shared flow conforms. The only supported value currently is majorVersion 4 and minorVersion 0. This setting may be used in the future to enable evolution of the shared flow format.',
    )
    contextInfo: Optional[str] = Field(
        None, description='A textual description of the shared flow revision.'
    )
    createdAt: Optional[str] = Field(
        None,
        description='Time at which this shared flow revision was created, in milliseconds since epoch.',
    )
    description: Optional[str] = Field(
        None, description='Description of the shared flow revision.'
    )
    displayName: Optional[str] = Field(
        None, description='The human readable name of this shared flow.'
    )
    entityMetaDataAsProperties: Optional[Dict[str, str]] = Field(
        None, description='A Key-Value map of metadata about this shared flow revision.'
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Time at which this shared flow revision was most recently modified, in milliseconds since epoch.',
    )
    name: Optional[str] = Field(
        None, description='The resource ID of the parent shared flow.'
    )
    policies: Optional[List[str]] = Field(
        None,
        description='A list of policy names included in this shared flow revision.',
    )
    resourceFiles: Optional[GoogleCloudApigeeV1ResourceFiles] = Field(
        None, description='The resource files included in this shared flow revision.'
    )
    resources: Optional[List[str]] = Field(
        None,
        description='A list of the resources included in this shared flow revision formatted as "{type}://{name}".',
    )
    revision: Optional[str] = Field(
        None, description='The resource ID of this revision.'
    )
    sharedFlows: Optional[List[str]] = Field(
        None,
        description='A list of the shared flow names included in this shared flow revision.',
    )
    type: Optional[str] = Field(None, description='The string "Application"')


class GoogleCloudApigeeV1Subscription(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Full name of the Pub/Sub subcription. Use the following structure in your request: `subscription "projects/foo/subscription/bar"`',
    )


class GoogleCloudApigeeV1SyncAuthorization(BaseModel):
    etag: Optional[str] = Field(
        None,
        description="Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting each other. For example, when you call [getSyncAuthorization](organizations/getSyncAuthorization) an ETag is returned in the response. Pass that ETag when calling the [setSyncAuthorization](organizations/setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. **Note**: We strongly recommend that you use the ETag in the read-modify-write cycle to avoid race conditions.",
    )
    identities: Optional[List[str]] = Field(
        None,
        description='Required. Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:` service-account-name. The service-account-name is formatted like an email address. For example: `my-synchronizer-manager-service_account@my_project_id.iam.gserviceaccount.com` You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one. The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/latest/sa-about#create-the-service-accounts).',
    )


class Protocol(Enum):
    PROTOCOL_UNSPECIFIED = 'PROTOCOL_UNSPECIFIED'
    HTTP = 'HTTP'
    GRPC = 'GRPC'


class GoogleCloudApigeeV1TestDatastoreResponse(BaseModel):
    error: Optional[str] = Field(
        None, description='Output only. Error message of test connection failure'
    )
    state: Optional[str] = Field(
        None, description='Output only. It could be `completed` or `failed`'
    )


class GoogleCloudApigeeV1TlsInfoCommonName(BaseModel):
    value: Optional[str] = Field(
        None, description='The TLS Common Name string of the certificate.'
    )
    wildcardMatch: Optional[bool] = Field(
        None,
        description='Indicates whether the cert should be matched against as a wildcard cert.',
    )


class GoogleCloudApigeeV1TlsInfoConfig(BaseModel):
    ciphers: Optional[List[str]] = Field(
        None, description='List of ciphers that are granted access.'
    )
    clientAuthEnabled: Optional[bool] = Field(
        None,
        description='Flag that specifies whether client-side authentication is enabled for the target server. Enables two-way TLS.',
    )
    commonName: Optional[GoogleCloudApigeeV1CommonNameConfig] = Field(
        None, description='Common name to validate the target server against.'
    )
    enabled: Optional[bool] = Field(
        None,
        description='Flag that specifies whether one-way TLS is enabled. Set to `true` to enable one-way TLS.',
    )
    ignoreValidationErrors: Optional[bool] = Field(
        None,
        description='Flag that specifies whether to ignore TLS certificate validation errors. Set to `true` to ignore errors.',
    )
    keyAlias: Optional[str] = Field(
        None,
        description='Name of the alias used for client-side authentication in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}/aliases/{alias}`',
    )
    keyAliasReference: Optional[GoogleCloudApigeeV1KeyAliasReference] = Field(
        None,
        description='Reference name and alias pair to use for client-side authentication.',
    )
    protocols: Optional[List[str]] = Field(
        None, description='List of TLS protocols that are granted access.'
    )
    trustStore: Optional[str] = Field(
        None,
        description='Name of the keystore or keystore reference containing trusted certificates for the server in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}` or `organizations/{org}/environments/{env}/references/{reference}`',
    )


class GoogleCloudApigeeV1TraceSamplingConfig(BaseModel):
    sampler: Optional[Sampler] = Field(
        None, description='Sampler of distributed tracing. OFF is the default value.'
    )
    samplingRate: Optional[float] = Field(
        None,
        description='Field sampling rate. This value is only applicable when using the PROBABILITY sampler. The supported values are > 0 and <= 0.5.',
    )


class Code(Enum):
    OK = 'OK'
    CANCELLED = 'CANCELLED'
    UNKNOWN = 'UNKNOWN'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'
    NOT_FOUND = 'NOT_FOUND'
    ALREADY_EXISTS = 'ALREADY_EXISTS'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    UNAUTHENTICATED = 'UNAUTHENTICATED'
    RESOURCE_EXHAUSTED = 'RESOURCE_EXHAUSTED'
    FAILED_PRECONDITION = 'FAILED_PRECONDITION'
    ABORTED = 'ABORTED'
    OUT_OF_RANGE = 'OUT_OF_RANGE'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    INTERNAL = 'INTERNAL'
    UNAVAILABLE = 'UNAVAILABLE'
    DATA_LOSS = 'DATA_LOSS'


class GoogleCloudApigeeV1UpdateError(BaseModel):
    code: Optional[Code] = Field(None, description='Status code.')
    message: Optional[str] = Field(None, description='User-friendly error message.')
    resource: Optional[str] = Field(
        None,
        description='The sub resource specific to this error (e.g. a proxy deployed within the EnvironmentConfig). If empty the error refers to the top level resource.',
    )
    type: Optional[str] = Field(
        None,
        description='A string that uniquely identifies the type of error. This provides a more reliable means to deduplicate errors across revisions and instances.',
    )


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class GoogleIamV1AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class GoogleProtobufEmpty(BaseModel):
    pass


class GoogleRpcPreconditionFailureViolation(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of how the precondition failed. Developers can use this description to understand how to fix the failure. For example: "Terms of service not accepted".',
    )
    subject: Optional[str] = Field(
        None,
        description='The subject, relative to the type, that failed. For example, "google.com/cloud" relative to the "TOS" type would indicate which terms of service is being referenced.',
    )
    type: Optional[str] = Field(
        None,
        description='The type of PreconditionFailure. We recommend using a service-specific enum type to define the supported precondition violation subjects. For example, "TOS" for "Terms of Service violation".',
    )


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class GoogleTypeExpr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GoogleTypeInterval(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.',
    )


class GoogleTypeMoney(BaseModel):
    currencyCode: Optional[str] = Field(
        None, description='The three-letter currency code defined in ISO 4217.'
    )
    nanos: Optional[int] = Field(
        None,
        description='Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.',
    )
    units: Optional[str] = Field(
        None,
        description='The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Retention(Enum):
    DELETION_RETENTION_UNSPECIFIED = 'DELETION_RETENTION_UNSPECIFIED'
    MINIMUM = 'MINIMUM'


class Format(Enum):
    INGRESS_CONFIG_VIEW_UNSPECIFIED = 'INGRESS_CONFIG_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class EdgeConfigstoreBundleBadBundle(BaseModel):
    violations: Optional[List[EdgeConfigstoreBundleBadBundleViolation]] = Field(
        None, description='Describes all precondition violations.'
    )


class GoogleCloudApigeeV1Access(BaseModel):
    Get: Optional[GoogleCloudApigeeV1AccessGet] = None
    Remove: Optional[GoogleCloudApigeeV1AccessRemove] = None
    Set: Optional[GoogleCloudApigeeV1AccessSet] = None


class GoogleCloudApigeeV1AddonsConfig(BaseModel):
    advancedApiOpsConfig: Optional[GoogleCloudApigeeV1AdvancedApiOpsConfig] = Field(
        None, description='Configuration for the Advanced API Ops add-on.'
    )
    apiSecurityConfig: Optional[GoogleCloudApigeeV1ApiSecurityConfig] = Field(
        None, description='Configuration for the API Security add-on.'
    )
    connectorsPlatformConfig: Optional[GoogleCloudApigeeV1ConnectorsPlatformConfig] = (
        Field(None, description='Configuration for the Connectors Platform add-on.')
    )
    integrationConfig: Optional[GoogleCloudApigeeV1IntegrationConfig] = Field(
        None, description='Configuration for the Integration add-on.'
    )
    monetizationConfig: Optional[GoogleCloudApigeeV1MonetizationConfig] = Field(
        None, description='Configuration for the Monetization add-on.'
    )


class GoogleCloudApigeeV1AdjustDeveloperBalanceRequest(BaseModel):
    adjustment: Optional[GoogleTypeMoney] = Field(
        None,
        description='* A positive value of `adjustment` means that that the API provider wants to adjust the balance for an under-charged developer i.e. the balance of the developer will decrease. * A negative value of `adjustment` means that that the API provider wants to adjust the balance for an over-charged developer i.e. the balance of the developer will increase.',
    )


class GoogleCloudApigeeV1Alias(BaseModel):
    alias: Optional[str] = Field(
        None,
        description='Resource ID for this alias. Values must match the regular expression `[^/]{1,255}`.',
    )
    certsInfo: Optional[GoogleCloudApigeeV1Certificate] = Field(
        None, description='Chain of certificates under this alias.'
    )
    type: Optional[Type] = Field(None, description='Type of alias.')


class GoogleCloudApigeeV1ApiCategory(BaseModel):
    data: Optional[GoogleCloudApigeeV1ApiCategoryData] = Field(
        None, description='Details of category.'
    )
    errorCode: Optional[str] = Field(
        None, description='ID that can be used to find errors in the log files.'
    )
    message: Optional[str] = Field(None, description='Description of the operation.')
    requestId: Optional[str] = Field(
        None,
        description='ID that can be used to find request details in the log files.',
    )
    status: Optional[str] = Field(None, description='Status of the operation.')


class GoogleCloudApigeeV1ApiProxy(BaseModel):
    apiProxyType: Optional[ApiProxyType] = Field(
        None, description='Output only. The type of the API proxy.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='User labels applied to this API Proxy.'
    )
    latestRevisionId: Optional[str] = Field(
        None,
        description='Output only. The id of the most recently created revision for this api proxy.',
    )
    metaData: Optional[GoogleCloudApigeeV1EntityMetadata] = Field(
        None, description='Output only. Metadata describing the API proxy.'
    )
    name: Optional[str] = Field(None, description='Output only. Name of the API proxy.')
    readOnly: Optional[bool] = Field(
        None,
        description='Output only. Whether this proxy is read-only. A read-only proxy cannot have new revisions created through calls to CreateApiProxyRevision. A proxy is read-only if it was generated by an archive.',
    )
    revision: Optional[List[str]] = Field(
        None, description='Output only. List of revisions defined for the API proxy.'
    )


class GoogleCloudApigeeV1ApiProxyRevision(BaseModel):
    archive: Optional[str] = Field(
        None,
        description='Output only. The archive that generated this proxy revision. This field is only present on proxy revisions that were generated by an archive. Proxies generated by archives cannot be updated, deleted, or deployed to other environments. Format: `organizations/*/environments/*/archiveDeployments/*`',
    )
    basepaths: Optional[List[str]] = Field(
        None, description='Base URL of the API proxy.'
    )
    configurationVersion: Optional[GoogleCloudApigeeV1ConfigVersion] = Field(
        None,
        description='Version of the API proxy configuration schema to which the API proxy conforms. Currently, the only supported value is 4.0 (`majorVersion.minorVersion`). This setting may be used in the future to track the evolution of the API proxy format.',
    )
    contextInfo: Optional[str] = Field(
        None,
        description='Revision number, app name, and organization for the API proxy.',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Time that the API proxy revision was created in milliseconds since epoch.',
    )
    description: Optional[str] = Field(
        None, description='Description of the API proxy revision.'
    )
    displayName: Optional[str] = Field(
        None, description='Human-readable name of the API proxy.'
    )
    entityMetaDataAsProperties: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata describing the API proxy revision as a key-value map.',
    )
    integrationEndpoints: Optional[List[str]] = Field(
        None,
        description="List of IntegrationEndpoints in the '/integration-endpoints' directory of the API proxy. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Time that the API proxy revision was last modified in milliseconds since epoch.',
    )
    name: Optional[str] = Field(None, description='Name of the API proxy.')
    policies: Optional[List[str]] = Field(
        None, description='List of policy names included in the API proxy revision..'
    )
    proxies: Optional[List[str]] = Field(
        None, description='List of proxy names included in the API proxy revision.'
    )
    proxyEndpoints: Optional[List[str]] = Field(
        None,
        description="List of ProxyEndpoints in the `/proxies` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
    )
    resourceFiles: Optional[GoogleCloudApigeeV1ResourceFiles] = Field(
        None, description='List of resource files included in the API proxy revision.'
    )
    resources: Optional[List[str]] = Field(
        None,
        description='List of the resources included in the API proxy revision formatted as "{type}://{name}".',
    )
    revision: Optional[str] = Field(None, description='API proxy revision.')
    sharedFlows: Optional[List[str]] = Field(
        None, description='List of the shared flows included in the API proxy revision.'
    )
    spec: Optional[str] = Field(
        None,
        description='OpenAPI Specification that is associated with the API proxy. The value is set to a URL or to a path in the specification store.',
    )
    targetEndpoints: Optional[List[str]] = Field(
        None,
        description="List of TargetEndpoints in the `/targets` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
    )
    targetServers: Optional[List[str]] = Field(
        None,
        description="List of TargetServers referenced in any TargetEndpoint in the API proxy. Typically, you will see this element only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
    )
    targets: Optional[List[str]] = Field(
        None, description='List of the targets included in the API proxy revision.'
    )
    teams: Optional[List[str]] = Field(
        None, description='List of the teams included in the API proxy revision.'
    )
    type: Optional[str] = Field(
        None,
        description='Type. Set to `Application`. Maintained for compatibility with the Apigee Edge API.',
    )


class GoogleCloudApigeeV1App(BaseModel):
    apiProducts: Optional[List[GoogleCloudApigeeV1ApiProductRef]] = Field(
        None, description='List of API products associated with the app.'
    )
    appId: Optional[str] = Field(None, description='ID of the app.')
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='List of attributes.'
    )
    callbackUrl: Optional[str] = Field(
        None,
        description='Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to apps.',
    )
    companyName: Optional[str] = Field(
        None, description='Name of the company that owns the app.'
    )
    createdAt: Optional[str] = Field(
        None, description='Output only. Unix time when the app was created.'
    )
    credentials: Optional[List[GoogleCloudApigeeV1Credential]] = Field(
        None,
        description='Output only. Set of credentials for the app. Credentials are API key/secret pairs associated with API products.',
    )
    developerId: Optional[str] = Field(None, description='ID of the developer.')
    keyExpiresIn: Optional[str] = Field(
        None,
        description="Duration, in milliseconds, of the consumer key that will be generated for the app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated. json key: keyExpiresIn",
    )
    lastModifiedAt: Optional[str] = Field(
        None, description='Output only. Last modified time as milliseconds since epoch.'
    )
    name: Optional[str] = Field(None, description='Name of the app.')
    scopes: Optional[List[str]] = Field(
        None,
        description='Scopes to apply to the app. The specified scope names must already exist on the API product that you associate with the app.',
    )
    status: Optional[str] = Field(None, description='Status of the credential.')


class GoogleCloudApigeeV1AsyncQuery(BaseModel):
    created: Optional[str] = Field(None, description='Creation time of the query.')
    envgroupHostname: Optional[str] = Field(
        None,
        description='Hostname is available only when query is executed at host level.',
    )
    error: Optional[str] = Field(None, description='Error is set when query fails.')
    executionTime: Optional[str] = Field(
        None,
        description='ExecutionTime is available only after the query is completed.',
    )
    name: Optional[str] = Field(None, description='Asynchronous Query Name.')
    queryParams: Optional[GoogleCloudApigeeV1QueryMetadata] = Field(
        None,
        description='Contains information like metrics, dimenstions etc of the AsyncQuery.',
    )
    reportDefinitionId: Optional[str] = Field(
        None, description='Asynchronous Report ID.'
    )
    result: Optional[GoogleCloudApigeeV1AsyncQueryResult] = Field(
        None, description='Result is available only after the query is completed.'
    )
    resultFileSize: Optional[str] = Field(
        None,
        description='ResultFileSize is available only after the query is completed.',
    )
    resultRows: Optional[str] = Field(
        None, description='ResultRows is available only after the query is completed.'
    )
    self: Optional[str] = Field(
        None,
        description='Self link of the query. Example: `/organizations/myorg/environments/myenv/queries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd` or following format if query is running at host level: `/organizations/myorg/hostQueries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`',
    )
    state: Optional[str] = Field(
        None,
        description='Query state could be "enqueued", "running", "completed", "failed".',
    )
    updated: Optional[str] = Field(
        None, description='Last updated timestamp for the query.'
    )


class GoogleCloudApigeeV1AsyncQueryResultView(BaseModel):
    code: Optional[int] = Field(None, description='Error code when there is a failure.')
    error: Optional[str] = Field(
        None, description='Error message when there is a failure.'
    )
    metadata: Optional[GoogleCloudApigeeV1QueryMetadata] = Field(
        None,
        description='Metadata contains information like metrics, dimenstions etc of the AsyncQuery.',
    )
    rows: Optional[List] = Field(
        None,
        description='Rows of query result. Each row is a JSON object. Example: {sum(message_count): 1, developer_app: "(not set)",…}',
    )
    state: Optional[str] = Field(None, description='State of retrieving ResultView.')


class GoogleCloudApigeeV1CanaryEvaluation(BaseModel):
    control: Optional[str] = Field(
        None, description='Required. The stable version that is serving requests.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Create time of the canary evaluation.'
    )
    endTime: Optional[str] = Field(
        None, description="Required. End time for the evaluation's analysis."
    )
    metricLabels: Optional[GoogleCloudApigeeV1CanaryEvaluationMetricLabels] = Field(
        None,
        description='Required. Labels used to filter the metrics used for a canary evaluation.',
    )
    name: Optional[str] = Field(
        None, description='Output only. Name of the canary evalution.'
    )
    startTime: Optional[str] = Field(
        None, description="Required. Start time for the canary evaluation's analysis."
    )
    state: Optional[State] = Field(
        None, description='Output only. The current state of the canary evaluation.'
    )
    treatment: Optional[str] = Field(
        None, description='Required. The newer version that is serving requests.'
    )
    verdict: Optional[Verdict] = Field(
        None,
        description='Output only. The resulting verdict of the canary evaluations: NONE, PASS, or FAIL.',
    )


class GoogleCloudApigeeV1ComputeEnvironmentScoresRequest(BaseModel):
    filters: Optional[
        List[GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter]
    ] = Field(
        None,
        description='Optional. Filters are used to filter scored components. Return all the components if no filter is mentioned. Example: [{ "scorePath": "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/source" }, { "scorePath": "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/target", }] This will return components with path: "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/source" OR "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/target"',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Optional. The maximum number of subcomponents to be returned in a single page. The service may return fewer than this value. If unspecified, at most 100 subcomponents will be returned in a single page.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='Optional. A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    timeRange: Optional[GoogleTypeInterval] = Field(
        None,
        description='Required. Time range for score calculation. At most 14 days of scores will be returned.',
    )


class GoogleCloudApigeeV1CreditDeveloperBalanceRequest(BaseModel):
    transactionAmount: Optional[GoogleTypeMoney] = Field(
        None,
        description='The amount of money to be credited. The wallet corresponding to the currency specified within `transaction_amount` will be updated. For example, if you specified `currency_code` within `transaction_amount` as "USD", then the amount would be added to the wallet which has the "USD" currency or if no such wallet exists, a new wallet will be created with the "USD" currency.',
    )
    transactionId: Optional[str] = Field(
        None,
        description='Each transaction_id uniquely identifies a credit balance request. If multiple requests are received with the same transaction_id, only one of them will be considered.',
    )


class GoogleCloudApigeeV1CustomReport(BaseModel):
    chartType: Optional[str] = Field(
        None, description='This field contains the chart type for the report'
    )
    comments: Optional[List[str]] = Field(
        None,
        description='Legacy field: not used. This field contains a list of comments associated with custom report',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Unix time when the app was created json key: createdAt',
    )
    dimensions: Optional[List[str]] = Field(
        None, description='This contains the list of dimensions for the report'
    )
    displayName: Optional[str] = Field(
        None, description='This is the display name for the report'
    )
    environment: Optional[str] = Field(
        None, description='Output only. Environment name'
    )
    filter: Optional[str] = Field(
        None, description='This field contains the filter expression'
    )
    fromTime: Optional[str] = Field(
        None,
        description='Legacy field: not used. Contains the from time for the report',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Modified time of this entity as milliseconds since epoch. json key: lastModifiedAt',
    )
    lastViewedAt: Optional[str] = Field(
        None,
        description='Output only. Last viewed time of this entity as milliseconds since epoch',
    )
    limit: Optional[str] = Field(
        None,
        description='Legacy field: not used This field contains the limit for the result retrieved',
    )
    metrics: Optional[List[GoogleCloudApigeeV1CustomReportMetric]] = Field(
        None, description='Required. This contains the list of metrics'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique identifier for the report T his is a legacy field used to encode custom report unique id',
    )
    offset: Optional[str] = Field(
        None,
        description='Legacy field: not used. This field contains the offset for the data',
    )
    organization: Optional[str] = Field(
        None, description='Output only. Organization name'
    )
    properties: Optional[List[GoogleCloudApigeeV1ReportProperty]] = Field(
        None,
        description='This field contains report properties such as ui metadata etc.',
    )
    sortByCols: Optional[List[str]] = Field(
        None,
        description='Legacy field: not used much. Contains the list of sort by columns',
    )
    sortOrder: Optional[str] = Field(
        None,
        description='Legacy field: not used much. Contains the sort order for the sort columns',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Legacy field: not used. This field contains a list of tags associated with custom report',
    )
    timeUnit: Optional[str] = Field(
        None,
        description='This field contains the time unit of aggregation for the report',
    )
    toTime: Optional[str] = Field(
        None, description='Legacy field: not used. Contains the end time for the report'
    )
    topk: Optional[str] = Field(
        None,
        description='Legacy field: not used. This field contains the top k parameter value for restricting the result',
    )


class GoogleCloudApigeeV1Datastore(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. Datastore create time, in milliseconds since the epoch of 1970-01-01T00:00:00Z',
    )
    datastoreConfig: Optional[GoogleCloudApigeeV1DatastoreConfig] = Field(
        None, description='Datastore Configurations.'
    )
    displayName: Optional[str] = Field(None, description='Required. Display name in UI')
    lastUpdateTime: Optional[str] = Field(
        None,
        description='Output only. Datastore last update time, in milliseconds since the epoch of 1970-01-01T00:00:00Z',
    )
    org: Optional[str] = Field(
        None, description='Output only. Organization that the datastore belongs to'
    )
    self: Optional[str] = Field(
        None,
        description='Output only. Resource link of Datastore. Example: `/organizations/{org}/analytics/datastores/{uuid}`',
    )
    targetType: Optional[str] = Field(
        None,
        description='Destination storage type. Supported types `gcs` or `bigquery`.',
    )


class GoogleCloudApigeeV1DeploymentChangeReportRoutingChange(BaseModel):
    description: Optional[str] = Field(
        None, description='Human-readable description of this routing change.'
    )
    environmentGroup: Optional[str] = Field(
        None,
        description='Name of the environment group affected by this routing change.',
    )
    fromDeployment: Optional[
        GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
    ] = Field(
        None, description='Base path/deployment that may stop receiving some traffic.'
    )
    shouldSequenceRollout: Optional[bool] = Field(
        None,
        description='Set to `true` if using sequenced rollout would make this routing change safer. **Note**: This does not necessarily imply that automated sequenced rollout mode is supported for the operation.',
    )
    toDeployment: Optional[
        GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
    ] = Field(
        None,
        description='Base path/deployment that may start receiving that traffic. May be null if no deployment is able to receive the traffic.',
    )


class GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict(BaseModel):
    conflictingDeployment: Optional[
        GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
    ] = Field(None, description='Existing base path/deployment causing the conflict.')
    description: Optional[str] = Field(
        None, description='Human-readable description of this conflict.'
    )
    environmentGroup: Optional[str] = Field(
        None, description='Name of the environment group in which this conflict exists.'
    )


class GoogleCloudApigeeV1DeveloperBalanceWallet(BaseModel):
    balance: Optional[GoogleTypeMoney] = Field(
        None,
        description='Current remaining balance of the developer for a particular currency.',
    )
    lastCreditTime: Optional[str] = Field(
        None,
        description='Output only. Time at which the developer last added credit to the account in milliseconds since epoch.',
    )


class GoogleCloudApigeeV1DimensionMetric(BaseModel):
    metrics: Optional[List[GoogleCloudApigeeV1Metric]] = Field(
        None, description='List of metrics.'
    )
    name: Optional[str] = Field(None, description='Name of the dimension.')


class GoogleCloudApigeeV1EnvironmentGroupConfig(BaseModel):
    endpointChainingRules: Optional[List[GoogleCloudApigeeV1EndpointChainingRule]] = (
        Field(
            None,
            description='A list of proxies in each deployment group for proxy chaining calls.',
        )
    )
    hostnames: Optional[List[str]] = Field(
        None, description='Host names for the environment group.'
    )
    location: Optional[str] = Field(
        None,
        description='When this message appears in the top-level IngressConfig, this field will be populated in lieu of the inlined routing_rules and hostnames fields. Some URL for downloading the full EnvironmentGroupConfig for this group.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the environment group in the following format: `organizations/{org}/envgroups/{envgroup}`.',
    )
    revisionId: Optional[str] = Field(
        None,
        description='Revision id that defines the ordering of the EnvironmentGroupConfig resource. The higher the revision, the more recently the configuration was deployed.',
    )
    routingRules: Optional[List[GoogleCloudApigeeV1RoutingRule]] = Field(
        None,
        description="Ordered list of routing rules defining how traffic to this environment group's hostnames should be routed to different environments.",
    )
    uid: Optional[str] = Field(
        None,
        description='A unique id for the environment group config that will only change if the environment group is deleted and recreated.',
    )


class GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse(BaseModel):
    urls: Optional[List[GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo]] = (
        Field(
            None,
            description='The list of Signed URLs generated by the CreateAsyncQuery request',
        )
    )


class GoogleCloudApigeeV1GraphQLOperationConfig(BaseModel):
    apiSource: Optional[str] = Field(
        None,
        description='Required. Name of the API proxy endpoint or remote service with which the GraphQL operation and quota are associated.',
    )
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='Custom attributes associated with the operation.'
    )
    operations: Optional[List[GoogleCloudApigeeV1GraphQLOperation]] = Field(
        None,
        description='Required. List of GraphQL name/operation type pairs for the proxy or remote service to which quota will be applied. If only operation types are specified, the quota will be applied to all GraphQL requests irrespective of the GraphQL name. **Note**: Currently, you can specify only a single GraphQLOperation. Specifying more than one will cause the operation to fail.',
    )
    quota: Optional[GoogleCloudApigeeV1Quota] = Field(
        None,
        description='Quota parameters to be enforced for the resources, methods, and API source combination. If none are specified, quota enforcement will not be done.',
    )


class GoogleCloudApigeeV1GraphQLOperationGroup(BaseModel):
    operationConfigType: Optional[str] = Field(
        None,
        description='Flag that specifies whether the configuration is for Apigee API proxy or a remote service. Valid values include `proxy` or `remoteservice`. Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated with the API product. Set to `remoteservice` when non-Apigee proxies like Istio-Envoy are associated with the API product.',
    )
    operationConfigs: Optional[List[GoogleCloudApigeeV1GraphQLOperationConfig]] = Field(
        None,
        description='Required. List of operation configurations for either Apigee API proxies or other remote services that are associated with this API product.',
    )


class GoogleCloudApigeeV1IngressConfig(BaseModel):
    environmentGroups: Optional[List[GoogleCloudApigeeV1EnvironmentGroupConfig]] = (
        Field(None, description='List of environment groups in the organization.')
    )
    name: Optional[str] = Field(
        None,
        description='Name of the resource in the following format: `organizations/{org}/deployedIngressConfig`.',
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='Time at which the IngressConfig revision was created.'
    )
    revisionId: Optional[str] = Field(
        None,
        description='Revision id that defines the ordering on IngressConfig resources. The higher the revision, the more recently the configuration was deployed.',
    )
    uid: Optional[str] = Field(
        None,
        description='A unique id for the ingress config that will only change if the organization is deleted and recreated.',
    )


class GoogleCloudApigeeV1InstanceDeploymentStatus(BaseModel):
    deployedRevisions: Optional[
        List[GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision]
    ] = Field(None, description='Revisions currently deployed in MPs.')
    deployedRoutes: Optional[
        List[GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute]
    ] = Field(
        None,
        description='Current routes deployed in the ingress routing table. A route which is missing will appear in `missing_routes`.',
    )
    instance: Optional[str] = Field(
        None, description='ID of the instance reporting the status.'
    )


class GoogleCloudApigeeV1ListApiProxiesResponse(BaseModel):
    proxies: Optional[List[GoogleCloudApigeeV1ApiProxy]] = None


class GoogleCloudApigeeV1ListAppsResponse(BaseModel):
    app: Optional[List[GoogleCloudApigeeV1App]] = None


class GoogleCloudApigeeV1ListAsyncQueriesResponse(BaseModel):
    queries: Optional[List[GoogleCloudApigeeV1AsyncQuery]] = Field(
        None, description='The asynchronous queries belong to requested resource name.'
    )


class GoogleCloudApigeeV1ListCustomReportsResponse(BaseModel):
    qualifier: Optional[List[GoogleCloudApigeeV1CustomReport]] = None


class GoogleCloudApigeeV1ListDatastoresResponse(BaseModel):
    datastores: Optional[List[GoogleCloudApigeeV1Datastore]] = Field(
        None, description='A list of datastores'
    )


class GoogleCloudApigeeV1ListDebugSessionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListDebugSessionsRequest to retrieve the next page. If omitted, no subsequent pages exist.',
    )
    sessions: Optional[List[GoogleCloudApigeeV1Session]] = Field(
        None,
        description='Session info that includes debug session ID and the first transaction creation timestamp.',
    )


class GoogleCloudApigeeV1ListEnvironmentResourcesResponse(BaseModel):
    resourceFile: Optional[List[GoogleCloudApigeeV1ResourceFile]] = Field(
        None, description='List of resources files.'
    )


class GoogleCloudApigeeV1ListHybridIssuersResponse(BaseModel):
    issuers: Optional[List[GoogleCloudApigeeV1ServiceIssuersMapping]] = Field(
        None, description='Lists of hybrid services and its trusted issuer email ids.'
    )


class GoogleCloudApigeeV1ListNatAddressesResponse(BaseModel):
    natAddresses: Optional[List[GoogleCloudApigeeV1NatAddress]] = Field(
        None, description='List of NAT Addresses for the instance.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Page token that you can include in a ListNatAddresses request to retrieve the next page of content. If omitted, no subsequent pages exist.',
    )


class GoogleCloudApigeeV1ListOrganizationsResponse(BaseModel):
    organizations: Optional[List[GoogleCloudApigeeV1OrganizationProjectMapping]] = (
        Field(
            None,
            description='List of Apigee organizations and associated Google Cloud projects.',
        )
    )


class GoogleCloudApigeeV1ListSecurityIncidentsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    securityIncidents: Optional[List[GoogleCloudApigeeV1SecurityIncident]] = Field(
        None, description='List of security incidents in the organization'
    )


class GoogleCloudApigeeV1ListSharedFlowsResponse(BaseModel):
    sharedFlows: Optional[List[GoogleCloudApigeeV1SharedFlow]] = None


class GoogleCloudApigeeV1OperationConfig(BaseModel):
    apiSource: Optional[str] = Field(
        None,
        description='Required. Name of the API proxy or remote service with which the resources, methods, and quota are associated.',
    )
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None, description='Custom attributes associated with the operation.'
    )
    operations: Optional[List[GoogleCloudApigeeV1Operation]] = Field(
        None,
        description='List of resource/method pairs for the API proxy or remote service to which quota will applied. **Note**: Currently, you can specify only a single resource/method pair. The call will fail if more than one resource/method pair is provided.',
    )
    quota: Optional[GoogleCloudApigeeV1Quota] = Field(
        None,
        description='Quota parameters to be enforced for the resources, methods, and API source combination. If none are specified, quota enforcement will not be done.',
    )


class GoogleCloudApigeeV1OperationGroup(BaseModel):
    operationConfigType: Optional[str] = Field(
        None,
        description='Flag that specifes whether the configuration is for Apigee API proxy or a remote service. Valid values include `proxy` or `remoteservice`. Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated with the API product. Set to `remoteservice` when non-Apigee proxies like Istio-Envoy are associated with the API product.',
    )
    operationConfigs: Optional[List[GoogleCloudApigeeV1OperationConfig]] = Field(
        None,
        description='Required. List of operation configurations for either Apigee API proxies or other remote services that are associated with this API product.',
    )


class GoogleCloudApigeeV1OperationMetadata(BaseModel):
    operationType: Optional[OperationType] = None
    progress: Optional[GoogleCloudApigeeV1OperationMetadataProgress] = Field(
        None, description='Progress of the operation.'
    )
    state: Optional[State7] = None
    targetResourceName: Optional[str] = Field(
        None,
        description='Name of the resource for which the operation is operating on.',
    )
    warnings: Optional[List[str]] = Field(
        None, description='Warnings encountered while executing the operation.'
    )


class GoogleCloudApigeeV1OptimizedStats(BaseModel):
    Response: Optional[GoogleCloudApigeeV1OptimizedStatsResponse] = Field(
        None,
        description='Wraps the `stats` response for JavaScript Optimized Scenario with a response key. For example: ```{ "Response": { "TimeUnit": [], "metaData": { "errors": [], "notices": [ "Source:Postgres", "Table used: edge.api.aaxgroup001.agg_api", "PG Host:ruappg08-ro.production.apigeeks.net", "query served by:80c4ebca-6a10-4a2e-8faf-c60c1ee306ca" ] }, "resultTruncated": false, "stats": { "data": [ { "identifier": { "names": [ "apiproxy" ], "values": [ "sirjee" ] }, "metric": [ { "env": "prod", "name": "sum(message_count)", "values": [ 36.0 ] }, { "env": "prod", "name": "sum(is_error)", "values": [ 36.0 ] } ] } ] } } }```',
    )


class GoogleCloudApigeeV1Properties(BaseModel):
    property: Optional[List[GoogleCloudApigeeV1Property]] = Field(
        None, description='List of all properties in the object'
    )


class GoogleCloudApigeeV1Query(BaseModel):
    csvDelimiter: Optional[str] = Field(
        None,
        description='Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\\t`).',
    )
    dimensions: Optional[List[str]] = Field(
        None,
        description='A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions',
    )
    envgroupHostname: Optional[str] = Field(
        None,
        description='Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostAsyncQuery where analytics data will be grouped by organization and hostname.',
    )
    filter: Optional[str] = Field(
        None,
        description='Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax',
    )
    groupByTimeUnit: Optional[str] = Field(
        None,
        description='Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.',
    )
    limit: Optional[int] = Field(
        None, description='Maximum number of rows that can be returned in the result.'
    )
    metrics: Optional[List[GoogleCloudApigeeV1QueryMetric]] = Field(
        None, description='A list of Metrics.'
    )
    name: Optional[str] = Field(None, description='Asynchronous Query Name.')
    outputFormat: Optional[str] = Field(
        None,
        description='Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.',
    )
    reportDefinitionId: Optional[str] = Field(
        None, description='Asynchronous Report ID.'
    )
    timeRange: Optional[Any] = Field(
        None,
        description='Required. Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: "timeRange": { "start": "2018-07-29T00:13:00Z", "end": "2018-08-01T00:18:00Z" }',
    )


class GoogleCloudApigeeV1QueryTabularStatsRequest(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Required. List of dimension names to group the aggregations by.',
    )
    filter: Optional[str] = Field(
        None,
        description="Filter further on specific dimension values. Follows the same grammar as custom report's filter expressions. Example, apiproxy eq 'foobar'. https://cloud.google.com/apigee/docs/api-platform/analytics/analytics-reference#filters",
    )
    metrics: Optional[List[GoogleCloudApigeeV1MetricAggregation]] = Field(
        None, description='Required. List of metrics and their aggregations.'
    )
    pageSize: Optional[int] = Field(
        None, description='Page size represents the number of rows.'
    )
    pageToken: Optional[str] = Field(None, description='Identifies a sequence of rows.')
    timeRange: Optional[GoogleTypeInterval] = Field(
        None, description='Time range for the stats.'
    )


class GoogleCloudApigeeV1QueryTimeSeriesStatsRequest(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None,
        description='List of dimension names to group the aggregations by. If no dimensions are passed, a single trend line representing the requested metric aggregations grouped by environment is returned.',
    )
    filter: Optional[str] = Field(
        None,
        description="Filter further on specific dimension values. Follows the same grammar as custom report's filter expressions. Example, apiproxy eq 'foobar'. https://cloud.google.com/apigee/docs/api-platform/analytics/analytics-reference#filters",
    )
    metrics: Optional[List[GoogleCloudApigeeV1MetricAggregation]] = Field(
        None, description='Required. List of metrics and their aggregations.'
    )
    pageSize: Optional[int] = Field(
        None,
        description='Page size represents the number of time series sequences, one per unique set of dimensions and their values.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='Page token stands for a specific collection of time series sequences.',
    )
    timeRange: Optional[GoogleTypeInterval] = Field(
        None, description='Required. Time range for the stats.'
    )
    timestampOrder: Optional[TimestampOrder] = Field(
        None,
        description='Order the sequences in increasing or decreasing order of timestamps. Default is descending order of timestamps (latest first).',
    )
    windowSize: Optional[WindowSize] = Field(
        None, description='Time buckets to group the stats by.'
    )


class GoogleCloudApigeeV1QueryTimeSeriesStatsResponse(BaseModel):
    columns: Optional[List[str]] = Field(
        None,
        description='Column names corresponding to the same order as the inner values in the stats field.',
    )
    nextPageToken: Optional[str] = Field(None, description='Next page token.')
    values: Optional[List[GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence]] = (
        Field(None, description='Results of the query returned as a JSON array.')
    )


class GoogleCloudApigeeV1RateRange(BaseModel):
    end: Optional[str] = Field(
        None,
        description='Ending value of the range. Set to 0 or `null` for the last range of values.',
    )
    fee: Optional[GoogleTypeMoney] = Field(
        None,
        description='Fee to charge when total number of API calls falls within this range.',
    )
    start: Optional[str] = Field(
        None,
        description='Starting value of the range. Set to 0 or `null` for the initial range of values.',
    )


class GoogleCloudApigeeV1Result(BaseModel):
    ActionResult: Optional[str] = Field(
        None,
        description='Type of the action result. Can be one of the five: DebugInfo, RequestMessage, ResponseMessage, ErrorMessage, VariableAccess',
    )
    accessList: Optional[List[GoogleCloudApigeeV1Access]] = Field(
        None,
        description='A list of variable access actions agaist the api proxy. Supported values: Get, Set, Remove.',
    )
    content: Optional[str] = Field(
        None,
        description='Error message content. for example, "content" : "{\\"fault\\":{\\"faultstring\\":\\"API timed out\\",\\"detail\\":{\\"errorcode\\":\\"flow.APITimedOut\\"}}}"',
    )
    headers: Optional[List[GoogleCloudApigeeV1Property]] = Field(
        None,
        description='A list of HTTP headers. for example, \'"headers" : [ { "name" : "Content-Length", "value" : "83" }, { "name" : "Content-Type", "value" : "application/json" } ]\'',
    )
    properties: Optional[GoogleCloudApigeeV1Properties] = Field(
        None, description='Name value pairs used for DebugInfo ActionResult.'
    )
    reasonPhrase: Optional[str] = Field(None, description='HTTP response phrase')
    statusCode: Optional[str] = Field(None, description='HTTP response code')
    timestamp: Optional[str] = Field(
        None,
        description='Timestamp of when the result is recorded. Its format is dd-mm-yy hh:mm:ss:xxx. For example, `"timestamp" : "12-08-19 00:31:59:960"`',
    )
    uRI: Optional[str] = Field(
        None,
        description='The relative path of the api proxy. for example, `"uRI" : "/iloveapis"`',
    )
    verb: Optional[str] = Field(None, description='HTTP method verb')


class GoogleCloudApigeeV1RevisionStatus(BaseModel):
    errors: Optional[List[GoogleCloudApigeeV1UpdateError]] = Field(
        None, description='Errors reported when attempting to load this revision.'
    )
    jsonSpec: Optional[str] = Field(
        None,
        description='The json content of the resource revision. Large specs should be sent individually via the spec field to avoid hitting request size limits.',
    )
    replicas: Optional[int] = Field(
        None,
        description='The number of replicas that have successfully loaded this revision.',
    )
    revisionId: Optional[str] = Field(None, description='The revision of the resource.')


class GoogleCloudApigeeV1RuntimeTraceConfigOverride(BaseModel):
    apiProxy: Optional[str] = Field(
        None,
        description='Name of the API proxy that will have its trace configuration overridden following format: `organizations/{org}/apis/{api}`',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the trace config override in the following format: `organizations/{org}/environment/{env}/traceConfig/overrides/{override}`',
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='The timestamp that the revision was created or updated.'
    )
    revisionId: Optional[str] = Field(
        None,
        description='Revision number which can be used by the runtime to detect if the trace config override has changed between two versions.',
    )
    samplingConfig: Optional[GoogleCloudApigeeV1RuntimeTraceSamplingConfig] = Field(
        None,
        description='Trace configuration override for a specific API proxy in an environment.',
    )
    uid: Optional[str] = Field(
        None,
        description='Unique ID for the configuration override. The ID will only change if the override is deleted and recreated. Corresponds to name\'s "override" field.',
    )


class GoogleCloudApigeeV1SchemaSchemaElement(BaseModel):
    name: Optional[str] = Field(None, description='Name of the field.')
    properties: Optional[GoogleCloudApigeeV1SchemaSchemaProperty] = Field(
        None,
        description='Properties for the schema field. For example: { "createTime": "2016-02-26T10:23:09.592Z", "custom": "false", "type": "string" }',
    )


class GoogleCloudApigeeV1ScoreComponentRecommendationAction(BaseModel):
    actionContext: Optional[
        GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext
    ] = Field(None, description='Action context for the action.')
    description: Optional[str] = Field(None, description='Description of the action.')


class GoogleCloudApigeeV1SecurityProfile(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Display name of the security profile.'
    )
    environments: Optional[List[GoogleCloudApigeeV1SecurityProfileEnvironment]] = Field(
        None, description='List of environments attached to security profile.'
    )
    maxScore: Optional[int] = Field(
        None,
        description='Output only. Maximum security score that can be generated by this profile.',
    )
    minScore: Optional[int] = Field(
        None,
        description='Output only. Minimum security score that can be generated by this profile.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. Name of the security profile resource. Format: organizations/{org}/securityProfiles/{profile}',
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='Output only. The time when revision was created.'
    )
    revisionId: Optional[str] = Field(
        None, description='Output only. Revision ID of the security profile.'
    )
    revisionPublishTime: Optional[str] = Field(
        None,
        description='Output only. The time when revision was published. Once published, the security profile revision cannot be updated further and can be attached to environments.',
    )
    revisionUpdateTime: Optional[str] = Field(
        None, description='Output only. The time when revision was updated.'
    )
    scoringConfigs: Optional[List[GoogleCloudApigeeV1SecurityProfileScoringConfig]] = (
        Field(None, description='List of profile scoring configs in this revision.')
    )


class GoogleCloudApigeeV1SecurityReport(BaseModel):
    created: Optional[str] = Field(None, description='Creation time of the query.')
    displayName: Optional[str] = Field(
        None, description='Display Name specified by the user.'
    )
    envgroupHostname: Optional[str] = Field(
        None,
        description='Hostname is available only when query is executed at host level.',
    )
    error: Optional[str] = Field(None, description='Error is set when query fails.')
    executionTime: Optional[str] = Field(
        None,
        description='ExecutionTime is available only after the query is completed.',
    )
    queryParams: Optional[GoogleCloudApigeeV1SecurityReportMetadata] = Field(
        None,
        description='Contains information like metrics, dimenstions etc of the Security Report.',
    )
    reportDefinitionId: Optional[str] = Field(None, description='Report Definition ID.')
    result: Optional[GoogleCloudApigeeV1SecurityReportResultMetadata] = Field(
        None, description='Result is available only after the query is completed.'
    )
    resultFileSize: Optional[str] = Field(
        None,
        description='ResultFileSize is available only after the query is completed.',
    )
    resultRows: Optional[str] = Field(
        None, description='ResultRows is available only after the query is completed.'
    )
    self: Optional[str] = Field(
        None,
        description='Self link of the query. Example: `/organizations/myorg/environments/myenv/securityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd` or following format if query is running at host level: `/organizations/myorg/hostSecurityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`',
    )
    state: Optional[str] = Field(
        None,
        description='Query state could be "enqueued", "running", "completed", "expired" and "failed".',
    )
    updated: Optional[str] = Field(
        None, description='Output only. Last updated timestamp for the query.'
    )


class GoogleCloudApigeeV1SecurityReportQuery(BaseModel):
    csvDelimiter: Optional[str] = Field(
        None,
        description='Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\\t`).',
    )
    dimensions: Optional[List[str]] = Field(
        None,
        description='A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions',
    )
    displayName: Optional[str] = Field(
        None, description='Security Report display name which users can specify.'
    )
    envgroupHostname: Optional[str] = Field(
        None,
        description='Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostSecurityReport where analytics data will be grouped by organization and hostname.',
    )
    filter: Optional[str] = Field(
        None,
        description='Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax',
    )
    groupByTimeUnit: Optional[str] = Field(
        None,
        description='Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.',
    )
    limit: Optional[int] = Field(
        None, description='Maximum number of rows that can be returned in the result.'
    )
    metrics: Optional[List[GoogleCloudApigeeV1SecurityReportQueryMetric]] = Field(
        None, description='A list of Metrics.'
    )
    mimeType: Optional[str] = Field(
        None,
        description='Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.',
    )
    reportDefinitionId: Optional[str] = Field(None, description='Report Definition ID.')
    timeRange: Optional[Any] = Field(
        None,
        description='Required. Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: "timeRange": { "start": "2018-07-29T00:13:00Z", "end": "2018-08-01T00:18:00Z" }',
    )


class GoogleCloudApigeeV1SetAddonsRequest(BaseModel):
    addonsConfig: Optional[GoogleCloudApigeeV1AddonsConfig] = Field(
        None, description='Required. Add-on configurations.'
    )


class GoogleCloudApigeeV1StatsEnvironmentStats(BaseModel):
    dimensions: Optional[List[GoogleCloudApigeeV1DimensionMetric]] = Field(
        None, description='List of metrics grouped under dimensions.'
    )
    metrics: Optional[List[GoogleCloudApigeeV1Metric]] = Field(
        None,
        description='In the final response, only one of the following fields will be present based on the dimensions provided. If no dimensions are provided, then only top-level metrics is provided. If dimensions are included, then there will be a top-level dimensions field under environments which will contain metrics values and the dimension name. Example: ``` "environments": [ { "dimensions": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.14049521E8" ] } ], "name": "nit_proxy" } ], "name": "prod" } ]``` or ```"environments": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.19026331E8" ] } ], "name": "prod" } ]``` List of metric values.',
    )
    name: Optional[str] = Field(None, description='Name of the environment.')


class GoogleCloudApigeeV1StatsHostStats(BaseModel):
    dimensions: Optional[List[GoogleCloudApigeeV1DimensionMetric]] = Field(
        None, description='List of metrics grouped under dimensions.'
    )
    metrics: Optional[List[GoogleCloudApigeeV1Metric]] = Field(
        None,
        description='In the final response, only one of the following fields will be present based on the dimensions provided. If no dimensions are provided, then only the top-level metrics are provided. If dimensions are included, then there will be a top-level dimensions field under hostnames which will contain metrics values and the dimension name. Example: ``` "hosts": [ { "dimensions": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.14049521E8" ] } ], "name": "nit_proxy" } ], "name": "example.com" } ]``` OR ```"hosts": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.19026331E8" ] } ], "name": "example.com" } ]``` List of metric values.',
    )
    name: Optional[str] = Field(None, description='Hostname used in query.')


class GoogleCloudApigeeV1TargetServerConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Whether the target server is enabled. An empty/omitted value for this field should be interpreted as true.',
    )
    host: Optional[str] = Field(None, description='Host name of the target server.')
    name: Optional[str] = Field(
        None,
        description='Target server revision name in the following format: `organizations/{org}/environments/{env}/targetservers/{targetserver}/revisions/{rev}`',
    )
    port: Optional[int] = Field(None, description='Port number for the target server.')
    protocol: Optional[Protocol] = Field(
        None, description='The protocol used by this target server.'
    )
    tlsInfo: Optional[GoogleCloudApigeeV1TlsInfoConfig] = Field(
        None, description='TLS settings for the target server.'
    )


class GoogleCloudApigeeV1TlsInfo(BaseModel):
    ciphers: Optional[List[str]] = Field(
        None,
        description='The SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.',
    )
    clientAuthEnabled: Optional[bool] = Field(
        None, description='Optional. Enables two-way TLS.'
    )
    commonName: Optional[GoogleCloudApigeeV1TlsInfoCommonName] = Field(
        None, description='The TLS Common Name of the certificate.'
    )
    enabled: Optional[bool] = Field(
        None,
        description='Required. Enables TLS. If false, neither one-way nor two-way TLS will be enabled.',
    )
    ignoreValidationErrors: Optional[bool] = Field(
        None,
        description='If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.',
    )
    keyAlias: Optional[str] = Field(
        None,
        description='Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.',
    )
    keyStore: Optional[str] = Field(
        None,
        description='Required if `client_auth_enabled` is true. The resource ID of the keystore.',
    )
    protocols: Optional[List[str]] = Field(
        None, description='The TLS versioins to be used.'
    )
    trustStore: Optional[str] = Field(
        None, description='The resource ID of the truststore.'
    )


class GoogleCloudApigeeV1TraceConfig(BaseModel):
    endpoint: Optional[str] = Field(
        None, description='Required. Endpoint of the exporter.'
    )
    exporter: Optional[Exporter] = Field(
        None,
        description='Required. Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.',
    )
    samplingConfig: Optional[GoogleCloudApigeeV1TraceSamplingConfig] = Field(
        None,
        description='Distributed trace configuration for all API proxies in an environment. You can also override the configuration for a specific API proxy using the distributed trace configuration overrides API.',
    )


class GoogleCloudApigeeV1TraceConfigOverride(BaseModel):
    apiProxy: Optional[str] = Field(
        None,
        description='ID of the API proxy that will have its trace configuration overridden.',
    )
    name: Optional[str] = Field(
        None,
        description='ID of the trace configuration override specified as a system-generated UUID.',
    )
    samplingConfig: Optional[GoogleCloudApigeeV1TraceSamplingConfig] = Field(
        None, description='Trace configuration to override.'
    )


class GoogleIamV1AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[GoogleIamV1AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[GoogleTypeExpr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleIamV1Policy(BaseModel):
    auditConfigs: Optional[List[GoogleIamV1AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class GoogleRpcPreconditionFailure(BaseModel):
    violations: Optional[List[GoogleRpcPreconditionFailureViolation]] = Field(
        None, description='Describes all precondition violations.'
    )


class GoogleCloudApigeeV1ApiProduct(BaseModel):
    apiResources: Optional[List[str]] = Field(
        None,
        description='Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the `proxy.pathsuffix` variable. The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the `apiResources` element is defined to be `/forecastrss` and the base path defined for the API proxy is `/weather`, then only requests to `/weather/forecastrss` are permitted by the API product. You can select a specific path, or you can select all subpaths with the following wildcard: - `/**`: Indicates that all sub-URIs are included. - `/*` : Indicates that only URIs one level down are included. By default, / supports the same resources as /** as well as the base path defined by the API proxy. For example, if the base path of the API proxy is `/v1/weatherapikey`, then the API product supports requests to `/v1/weatherapikey` and to any sub-URIs, such as `/v1/weatherapikey/forecastrss`, `/v1/weatherapikey/region/CA`, and so on. For more information, see Managing API products.',
    )
    approvalType: Optional[str] = Field(
        None,
        description='Flag that specifies how API keys are approved to access the APIs defined by the API product. If set to `manual`, the consumer key is generated and returned in "pending" state. In this case, the API keys won\'t work until they have been explicitly approved. If set to `auto`, the consumer key is generated and returned in "approved" state and can be used immediately. **Note:** Typically, `auto` is used to provide access to free or trial API products that provide limited quota or capabilities.',
    )
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(
        None,
        description='Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes. Use this property to specify the access level of the API product as either `public`, `private`, or `internal`. Only products marked `public` are available to developers in the Apigee developer portal. For example, you can set a product to `internal` while it is in development and then change access to `public` when it is ready to release on the portal. API products marked as `private` do not appear on the portal, but can be accessed by external developers.',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Response only. Creation time of this environment as milliseconds since epoch.',
    )
    description: Optional[str] = Field(
        None,
        description='Description of the API product. Include key information about the API product that is not captured by other fields.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Name displayed in the UI or developer portal to developers registering for API access.',
    )
    environments: Optional[List[str]] = Field(
        None,
        description='Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected. By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment. This setting is used, for example, to prevent resources associated with API proxies in `prod` from being accessed by API proxies deployed in `test`.',
    )
    graphqlOperationGroup: Optional[GoogleCloudApigeeV1GraphQLOperationGroup] = Field(
        None,
        description='Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Response only. Modified time of this environment as milliseconds since epoch.',
    )
    name: Optional[str] = Field(
        None,
        description='Internal name of the API product. Characters you can use in the name are restricted to: `A-Z0-9._\\-$ %`. **Note:** The internal name cannot be edited when updating the API product.',
    )
    operationGroup: Optional[GoogleCloudApigeeV1OperationGroup] = Field(
        None,
        description='Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the `quota` setting). **Note:** The `api_resources` setting cannot be specified for both the API product and operation group; otherwise the call will fail.',
    )
    proxies: Optional[List[str]] = Field(
        None,
        description='Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies. Apigee rejects requests to API proxies that are not listed. **Note:** The API proxy names must already exist in the specified environment as they will be validated upon creation.',
    )
    quota: Optional[str] = Field(
        None,
        description='Number of request messages permitted per app by this API product for the specified `quotaInterval` and `quotaTimeUnit`. For example, a `quota` of 50, for a `quotaInterval` of 12 and a `quotaTimeUnit` of hours means 50 requests are allowed every 12 hours.',
    )
    quotaCounterScope: Optional[QuotaCounterScope] = Field(
        None,
        description='Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.',
    )
    quotaInterval: Optional[str] = Field(
        None,
        description='Time interval over which the number of request messages is calculated.',
    )
    quotaTimeUnit: Optional[str] = Field(
        None,
        description='Time unit defined for the `quotaInterval`. Valid values include `minute`, `hour`, `day`, or `month`.',
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.',
    )


class GoogleCloudApigeeV1Deployment(BaseModel):
    apiProxy: Optional[str] = Field(None, description='API proxy.')
    deployStartTime: Optional[str] = Field(
        None,
        description='Time the API proxy was marked `deployed` in the control plane in millisconds since epoch.',
    )
    environment: Optional[str] = Field(None, description='Environment.')
    errors: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Errors reported for this deployment. Populated only when state == ERROR. **Note**: This field is displayed only when viewing deployment status.',
    )
    instances: Optional[List[GoogleCloudApigeeV1InstanceDeploymentStatus]] = Field(
        None,
        description='Status reported by each runtime instance. **Note**: This field is displayed only when viewing deployment status.',
    )
    pods: Optional[List[GoogleCloudApigeeV1PodStatus]] = Field(
        None,
        description='Status reported by runtime pods. **Note**: **This field is deprecated**. Runtime versions 1.3 and above report instance level status rather than pod status.',
    )
    revision: Optional[str] = Field(None, description='API proxy revision.')
    routeConflicts: Optional[
        List[GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict]
    ] = Field(
        None,
        description="Conflicts in the desired state routing configuration. The presence of conflicts does not cause the state to be `ERROR`, but it will mean that some of the deployment's base paths are not routed to its environment. If the conflicts change, the state will transition to `PROGRESSING` until the latest configuration is rolled out to all instances. **Note**: This field is displayed only when viewing deployment status.",
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='The full resource name of Cloud IAM Service Account that this deployment is using, eg, `projects/-/serviceAccounts/{email}`.',
    )
    state: Optional[State1] = Field(
        None,
        description='Current state of the deployment. **Note**: This field is displayed only when viewing deployment status.',
    )


class GoogleCloudApigeeV1DeploymentChangeReport(BaseModel):
    routingChanges: Optional[
        List[GoogleCloudApigeeV1DeploymentChangeReportRoutingChange]
    ] = Field(
        None,
        description='All routing changes that may result from a deployment request.',
    )
    routingConflicts: Optional[
        List[GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict]
    ] = Field(
        None, description='All base path conflicts detected for a deployment request.'
    )
    validationErrors: Optional[GoogleRpcPreconditionFailure] = Field(
        None,
        description='Validation errors that would cause the deployment change request to be rejected.',
    )


class GoogleCloudApigeeV1DeveloperBalance(BaseModel):
    wallets: Optional[List[GoogleCloudApigeeV1DeveloperBalanceWallet]] = Field(
        None,
        description='Output only. List of all wallets. Each individual wallet stores the account balance for a particular currency.',
    )


class GoogleCloudApigeeV1Environment(BaseModel):
    apiProxyType: Optional[ApiProxyType] = Field(
        None,
        description='Optional. API Proxy type supported by the environment. The type can be set when creating the Environment and cannot be changed.',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Creation time of this environment as milliseconds since epoch.',
    )
    deploymentType: Optional[DeploymentType] = Field(
        None,
        description='Optional. Deployment type supported by the environment. The deployment type can be set when creating the environment and cannot be changed. When you enable archive deployment, you will be **prevented from performing** a [subset of actions](/apigee/docs/api-platform/local-development/overview#prevented-actions) within the environment, including: * Managing the deployment of API proxy or shared flow revisions * Creating, updating, or deleting resource files * Creating, updating, or deleting target servers',
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the environment.'
    )
    displayName: Optional[str] = Field(
        None, description='Optional. Display name for this environment.'
    )
    forwardProxyUri: Optional[str] = Field(
        None,
        description='Optional. Url of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that scheme must be one of "http" or "https", and port must be supplied.',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Last modification time of this environment as milliseconds since epoch.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the environment. Values must match the regular expression `^[.\\\\p{Alnum}-_]{1,255}$`',
    )
    nodeConfig: Optional[GoogleCloudApigeeV1NodeConfig] = Field(
        None, description='Optional. NodeConfig of the environment.'
    )
    properties: Optional[GoogleCloudApigeeV1Properties] = Field(
        None,
        description='Optional. Key-value pairs that may be used for customizing the environment.',
    )
    state: Optional[State2] = Field(
        None,
        description='Output only. State of the environment. Values other than ACTIVE means the resource is not ready to use.',
    )


class GoogleCloudApigeeV1ListApiProductsResponse(BaseModel):
    apiProduct: Optional[List[GoogleCloudApigeeV1ApiProduct]] = Field(
        None, description='Lists all API product names defined for an organization.'
    )


class GoogleCloudApigeeV1ListDeploymentsResponse(BaseModel):
    deployments: Optional[List[GoogleCloudApigeeV1Deployment]] = Field(
        None, description='List of deployments.'
    )


class GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    securityProfiles: Optional[List[GoogleCloudApigeeV1SecurityProfile]] = Field(
        None,
        description='List of security profile revisions. The revisions may be attached or unattached to any environment.',
    )


class GoogleCloudApigeeV1ListSecurityProfilesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    securityProfiles: Optional[List[GoogleCloudApigeeV1SecurityProfile]] = Field(
        None,
        description='List of security profiles in the organization. The profiles may be attached or unattached to any environment. This will return latest revision of each profile.',
    )


class GoogleCloudApigeeV1ListSecurityReportsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If the number of security reports exceeded the page size requested, the token can be used to fetch the next page in a subsequent call. If the response is the last page and there are no more reports to return this field is left empty.',
    )
    securityReports: Optional[List[GoogleCloudApigeeV1SecurityReport]] = Field(
        None, description='The security reports belong to requested resource name.'
    )


class GoogleCloudApigeeV1ListTraceConfigOverridesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token value that can be passed as `page_token` to retrieve the next page of content.',
    )
    traceConfigOverrides: Optional[List[GoogleCloudApigeeV1TraceConfigOverride]] = (
        Field(
            None,
            description='List all trace configuration overrides in an environment.',
        )
    )


class GoogleCloudApigeeV1Organization(BaseModel):
    addonsConfig: Optional[GoogleCloudApigeeV1AddonsConfig] = Field(
        None, description='Addon configurations of the Apigee organization.'
    )
    analyticsRegion: Optional[str] = Field(
        None,
        description='Required. DEPRECATED: This field will be deprecated once Apigee supports DRZ. Primary Google Cloud region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).',
    )
    apiConsumerDataEncryptionKeyName: Optional[str] = Field(
        None,
        description='Cloud KMS key name used for encrypting API consumer data. Required for US/EU regions when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION` or the region is not US/EU, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`',
    )
    apiConsumerDataLocation: Optional[str] = Field(
        None,
        description='This field is needed only for customers with control plane in US or EU. Apigee stores some control plane data only in single region. This field determines which single region Apigee should use. For example: "us-west1" when control plane is in US or "europe-west2" when control plane is in EU.',
    )
    apigeeProjectId: Optional[str] = Field(
        None,
        description='Output only. Apigee Project ID associated with the organization. Use this project to allowlist Apigee in the Service Attachment when using private service connect with Apigee.',
    )
    attributes: Optional[List[str]] = Field(None, description='Not used by Apigee.')
    authorizedNetwork: Optional[str] = Field(
        None,
        description='Compute Engine network used for Service Networking to be peered with Apigee runtime instances. See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started). Valid only when [RuntimeType](#RuntimeType) is set to `CLOUD`. The value must be set before the creation of a runtime instance and can be updated only when there are no runtime instances. For example: `default`. Apigee also supports shared VPC (that is, the host network project is not the same as the one that is peering with Apigee). See [Shared VPC overview](https://cloud.google.com/vpc/docs/shared-vpc). To use a shared VPC network, use the following format: `projects/{host-project-id}/{region}/networks/{network-name}`. For example: `projects/my-sharedvpc-host/global/networks/mynetwork` **Note:** Not supported for Apigee hybrid.',
    )
    billingType: Optional[BillingType1] = Field(
        None,
        description='Billing type of the Apigee organization. See [Apigee pricing](https://cloud.google.com/apigee/pricing).',
    )
    caCertificate: Optional[str] = Field(
        None,
        description='Output only. Base64-encoded public certificate for the root CA of the Apigee organization. Valid only when [RuntimeType](#RuntimeType) is `CLOUD`.',
    )
    controlPlaneEncryptionKeyName: Optional[str] = Field(
        None,
        description='Cloud KMS key name used for encrypting control plane data that is stored in a multi region. Required when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION`, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Time that the Apigee organization was created in milliseconds since epoch.',
    )
    customerName: Optional[str] = Field(None, description='Not used by Apigee.')
    description: Optional[str] = Field(
        None, description='Description of the Apigee organization.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Display name for the Apigee organization. Unused, but reserved for future use.',
    )
    environments: Optional[List[str]] = Field(
        None,
        description='Output only. List of environments in the Apigee organization.',
    )
    expiresAt: Optional[str] = Field(
        None,
        description='Output only. Time that the Apigee organization is scheduled for deletion.',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Time that the Apigee organization was last modified in milliseconds since epoch.',
    )
    name: Optional[str] = Field(
        None, description='Output only. Name of the Apigee organization.'
    )
    portalDisabled: Optional[bool] = Field(
        None, description='Configuration for the Portals settings.'
    )
    projectId: Optional[str] = Field(
        None,
        description='Output only. Project ID associated with the Apigee organization.',
    )
    properties: Optional[GoogleCloudApigeeV1Properties] = Field(
        None, description='Properties defined in the Apigee organization profile.'
    )
    runtimeDatabaseEncryptionKeyName: Optional[str] = Field(
        None,
        description='Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances. Update is not allowed after the organization is created. Required when [RuntimeType](#RuntimeType) is `CLOUD`. If not specified when [RuntimeType](#RuntimeType) is `TRIAL`, a Google-Managed encryption key will be used. For example: "projects/foo/locations/us/keyRings/bar/cryptoKeys/baz". **Note:** Not supported for Apigee hybrid.',
    )
    runtimeType: Optional[RuntimeType] = Field(
        None,
        description='Required. Runtime type of the Apigee organization based on the Apigee subscription purchased.',
    )
    state: Optional[State9] = Field(
        None,
        description='Output only. State of the organization. Values other than ACTIVE means the resource is not ready to use.',
    )
    subscriptionType: Optional[SubscriptionType] = Field(
        None,
        description='Output only. DEPRECATED: This will eventually be replaced by BillingType. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased). See [Apigee pricing](https://cloud.google.com/apigee/pricing/).',
    )
    type: Optional[Type4] = Field(None, description='Not used by Apigee.')


class GoogleCloudApigeeV1Point(BaseModel):
    id: Optional[str] = Field(None, description='Name of a step in the transaction.')
    results: Optional[List[GoogleCloudApigeeV1Result]] = Field(
        None, description='List of results extracted from a given debug point.'
    )


class GoogleCloudApigeeV1RatePlan(BaseModel):
    apiproduct: Optional[str] = Field(
        None,
        description='Name of the API product that the rate plan is associated with.',
    )
    billingPeriod: Optional[BillingPeriod] = Field(
        None, description='Frequency at which the customer will be billed.'
    )
    consumptionPricingRates: Optional[List[GoogleCloudApigeeV1RateRange]] = Field(
        None,
        description='API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { "start": 1, "end": 100, "fee": 75 }, { "start": 101, "end": 200, "fee": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.',
    )
    consumptionPricingType: Optional[ConsumptionPricingType] = Field(
        None, description='Pricing model used for consumption-based charges.'
    )
    createdAt: Optional[str] = Field(
        None,
        description='Output only. Time that the rate plan was created in milliseconds since epoch.',
    )
    currencyCode: Optional[str] = Field(
        None,
        description='Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.',
    )
    description: Optional[str] = Field(
        None, description='Description of the rate plan.'
    )
    displayName: Optional[str] = Field(
        None, description='Display name of the rate plan.'
    )
    endTime: Optional[str] = Field(
        None,
        description='Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.',
    )
    fixedFeeFrequency: Optional[int] = Field(
        None, description='Frequency at which the fixed fee is charged.'
    )
    fixedRecurringFee: Optional[GoogleTypeMoney] = Field(
        None,
        description='Fixed amount that is charged at a defined interval and billed in advance of use of the API product. The fee will be prorated for the first billing period.',
    )
    lastModifiedAt: Optional[str] = Field(
        None,
        description='Output only. Time the rate plan was last modified in milliseconds since epoch.',
    )
    name: Optional[str] = Field(None, description='Output only. Name of the rate plan.')
    paymentFundingModel: Optional[PaymentFundingModel] = Field(
        None,
        description='DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.',
    )
    revenueShareRates: Optional[List[GoogleCloudApigeeV1RevenueShareRange]] = Field(
        None, description='Details of the revenue sharing model.'
    )
    revenueShareType: Optional[RevenueShareType] = Field(
        None,
        description='Method used to calculate the revenue that is shared with developers.',
    )
    setupFee: Optional[GoogleTypeMoney] = Field(
        None, description='Initial, one-time fee paid when purchasing the API product.'
    )
    startTime: Optional[str] = Field(
        None,
        description='Time when the rate plan becomes active in milliseconds since epoch.',
    )
    state: Optional[State10] = Field(
        None, description='Current state of the rate plan (draft or published).'
    )


class GoogleCloudApigeeV1ResourceStatus(BaseModel):
    resource: Optional[str] = Field(
        None,
        description='The resource name. Currently only two resources are supported: EnvironmentGroup - organizations/{org}/envgroups/{envgroup} EnvironmentConfig - organizations/{org}/environments/{environment}/deployedConfig',
    )
    revisions: Optional[List[GoogleCloudApigeeV1RevisionStatus]] = Field(
        None,
        description='Revisions of the resource currently deployed in the instance.',
    )
    totalReplicas: Optional[int] = Field(
        None, description='The total number of replicas that should have this resource.'
    )
    uid: Optional[str] = Field(
        None,
        description='The uid of the resource. In the unexpected case that the instance has multiple uids for the same name, they should be reported under separate ResourceStatuses.',
    )


class GoogleCloudApigeeV1RuntimeTraceConfig(BaseModel):
    endpoint: Optional[str] = Field(None, description='Endpoint of the exporter.')
    exporter: Optional[Exporter] = Field(
        None,
        description='Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the trace config in the following format: `organizations/{org}/environment/{env}/traceConfig`',
    )
    overrides: Optional[List[GoogleCloudApigeeV1RuntimeTraceConfigOverride]] = Field(
        None,
        description='List of trace configuration overrides for spicific API proxies.',
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='The timestamp that the revision was created or updated.'
    )
    revisionId: Optional[str] = Field(
        None,
        description='Revision number which can be used by the runtime to detect if the trace config has changed between two versions.',
    )
    samplingConfig: Optional[GoogleCloudApigeeV1RuntimeTraceSamplingConfig] = Field(
        None, description='Trace configuration for all API proxies in an environment.'
    )


class GoogleCloudApigeeV1Schema(BaseModel):
    dimensions: Optional[List[GoogleCloudApigeeV1SchemaSchemaElement]] = Field(
        None, description='List of schema fields grouped as dimensions.'
    )
    meta: Optional[List[str]] = Field(
        None,
        description='Additional metadata associated with schema. This is a legacy field and usually consists of an empty array of strings.',
    )
    metrics: Optional[List[GoogleCloudApigeeV1SchemaSchemaElement]] = Field(
        None,
        description='List of schema fields grouped as dimensions that can be used with an aggregate function such as `sum`, `avg`, `min`, and `max`.',
    )


class GoogleCloudApigeeV1ScoreComponentRecommendation(BaseModel):
    actions: Optional[List[GoogleCloudApigeeV1ScoreComponentRecommendationAction]] = (
        Field(
            None,
            description='Actions for the recommendation to improve the security score.',
        )
    )
    description: Optional[str] = Field(
        None, description='Description of the recommendation.'
    )
    impact: Optional[int] = Field(
        None,
        description='Potential impact of this recommendation on the overall score. This denotes how important this recommendation is to improve the score.',
    )
    title: Optional[str] = Field(
        None, description='Title represents recommendation title.'
    )


class GoogleCloudApigeeV1Stats(BaseModel):
    environments: Optional[List[GoogleCloudApigeeV1StatsEnvironmentStats]] = Field(
        None, description='List of query results on the environment level.'
    )
    hosts: Optional[List[GoogleCloudApigeeV1StatsHostStats]] = Field(
        None, description='List of query results grouped by host.'
    )
    metaData: Optional[GoogleCloudApigeeV1Metadata] = Field(
        None, description='Metadata information.'
    )


class GoogleCloudApigeeV1TargetServer(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. A human-readable description of this TargetServer.'
    )
    host: Optional[str] = Field(
        None,
        description='Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.',
    )
    isEnabled: Optional[bool] = Field(
        None,
        description='Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. The resource id of this target server. Values must match the regular expression ',
    )
    port: Optional[int] = Field(
        None,
        description='Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.',
    )
    protocol: Optional[Protocol] = Field(
        None, description='Immutable. The protocol used by this TargetServer.'
    )
    sSLInfo: Optional[GoogleCloudApigeeV1TlsInfo] = Field(
        None,
        description='Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.',
    )


class GoogleLongrunningListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[GoogleLongrunningOperation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class GoogleCloudApigeeV1DebugSessionTransaction(BaseModel):
    completed: Optional[bool] = Field(
        None, description='Flag indicating whether a transaction is completed or not'
    )
    point: Optional[List[GoogleCloudApigeeV1Point]] = Field(
        None,
        description='List of debug data collected by runtime plane at various defined points in the flow.',
    )


class GoogleCloudApigeeV1EnvironmentConfig(BaseModel):
    arcConfigLocation: Optional[str] = Field(
        None,
        description='The location for the config blob of API Runtime Control, aka Envoy Adapter, for op-based authentication as a URI, e.g. a Cloud Storage URI. This is only used by Envoy-based gateways.',
    )
    createTime: Optional[str] = Field(
        None, description='Time that the environment configuration was created.'
    )
    dataCollectors: Optional[List[GoogleCloudApigeeV1DataCollectorConfig]] = Field(
        None,
        description='List of data collectors used by the deployments in the environment.',
    )
    debugMask: Optional[GoogleCloudApigeeV1DebugMask] = Field(
        None,
        description='Debug mask that applies to all deployments in the environment.',
    )
    deploymentGroups: Optional[List[GoogleCloudApigeeV1DeploymentGroupConfig]] = Field(
        None, description='List of deployment groups in the environment.'
    )
    deployments: Optional[List[GoogleCloudApigeeV1DeploymentConfig]] = Field(
        None, description='List of deployments in the environment.'
    )
    envScopedRevisionId: Optional[str] = Field(
        None,
        description='Revision ID for environment-scoped resources (e.g. target servers, keystores) in this config. This ID will increment any time a resource not scoped to a deployment group changes.',
    )
    featureFlags: Optional[Dict[str, str]] = Field(
        None,
        description='Feature flags inherited from the organization and environment.',
    )
    flowhooks: Optional[List[GoogleCloudApigeeV1FlowHookConfig]] = Field(
        None, description='List of flow hooks in the environment.'
    )
    forwardProxyUri: Optional[str] = Field(
        None,
        description="The forward proxy's url to be used by the runtime. When set, runtime will send requests to the target via the given forward proxy. This is only used by programmable gateways.",
    )
    gatewayConfigLocation: Optional[str] = Field(
        None,
        description='The location for the gateway config blob as a URI, e.g. a Cloud Storage URI. This is only used by Envoy-based gateways.',
    )
    keystores: Optional[List[GoogleCloudApigeeV1KeystoreConfig]] = Field(
        None, description='List of keystores in the environment.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the environment configuration in the following format: `organizations/{org}/environments/{env}/configs/{config}`',
    )
    provider: Optional[str] = Field(
        None,
        description='Used by the Control plane to add context information to help detect the source of the document during diagnostics and debugging.',
    )
    pubsubTopic: Optional[str] = Field(
        None, description='Name of the PubSub topic for the environment.'
    )
    resourceReferences: Optional[List[GoogleCloudApigeeV1ReferenceConfig]] = Field(
        None, description='List of resource references in the environment.'
    )
    resources: Optional[List[GoogleCloudApigeeV1ResourceConfig]] = Field(
        None, description='List of resource versions in the environment.'
    )
    revisionId: Optional[str] = Field(
        None,
        description='Revision ID of the environment configuration. The higher the value, the more recently the configuration was deployed.',
    )
    sequenceNumber: Optional[str] = Field(
        None, description='DEPRECATED: Use revision_id.'
    )
    targets: Optional[List[GoogleCloudApigeeV1TargetServerConfig]] = Field(
        None,
        description='List of target servers in the environment. Disabled target servers are not displayed.',
    )
    traceConfig: Optional[GoogleCloudApigeeV1RuntimeTraceConfig] = Field(
        None,
        description='Trace configurations. Contains config for the environment and config overrides for specific API proxies.',
    )
    uid: Optional[str] = Field(
        None,
        description='Unique ID for the environment configuration. The ID will only change if the environment is deleted and recreated.',
    )


class GoogleCloudApigeeV1ListRatePlansResponse(BaseModel):
    nextStartKey: Optional[str] = Field(
        None,
        description='Value that can be sent as `startKey` to retrieve the next page of content. If this field is omitted, there are no subsequent pages.',
    )
    ratePlans: Optional[List[GoogleCloudApigeeV1RatePlan]] = Field(
        None, description='List of rate plans in an organization.'
    )


class GoogleCloudApigeeV1ReportInstanceStatusRequest(BaseModel):
    instanceUid: Optional[str] = Field(
        None,
        description='A unique ID for the instance which is guaranteed to be unique in case the user installs multiple hybrid runtimes with the same instance ID.',
    )
    reportTime: Optional[str] = Field(
        None,
        description="The time the report was generated in the runtime. Used to prevent an old status from overwriting a newer one. An instance should space out it's status reports so that clock skew does not play a factor.",
    )
    resources: Optional[List[GoogleCloudApigeeV1ResourceStatus]] = Field(
        None, description='Status for config resources'
    )


class GoogleCloudApigeeV1ScoreComponent(BaseModel):
    calculateTime: Optional[str] = Field(
        None, description='Time when score was calculated.'
    )
    dataCaptureTime: Optional[str] = Field(
        None,
        description='Time in the requested time period when data was last captured to compute the score.',
    )
    drilldownPaths: Optional[List[str]] = Field(
        None, description='List of paths for next components.'
    )
    recommendations: Optional[List[GoogleCloudApigeeV1ScoreComponentRecommendation]] = (
        Field(None, description='List of recommendations to improve API security.')
    )
    score: Optional[int] = Field(None, description='Score for the component.')
    scorePath: Optional[str] = Field(
        None,
        description='Path of the component. Example: /org@myorg/envgroup@myenvgroup/proxies/proxy@myproxy',
    )


class GoogleCloudApigeeV1Score(BaseModel):
    component: Optional[GoogleCloudApigeeV1ScoreComponent] = Field(
        None, description='Component containing score, recommendations and actions.'
    )
    subcomponents: Optional[List[GoogleCloudApigeeV1ScoreComponent]] = Field(
        None, description='List of all the drilldown score components.'
    )
    timeRange: Optional[GoogleTypeInterval] = Field(
        None, description='Start and end time for the score.'
    )


class GoogleCloudApigeeV1ComputeEnvironmentScoresResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous `ComputeScore` call. Provide this to retrieve the subsequent page.',
    )
    scores: Optional[List[GoogleCloudApigeeV1Score]] = Field(
        None, description='List of scores. One score per day.'
    )
